<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Go语言极限入门</title>
    <url>/2022/04/go-first-tutorial/</url>
    <content><![CDATA[<h2 id="Go语言极限入门"><a href="#Go语言极限入门" class="headerlink" title="Go语言极限入门"></a>Go语言极限入门</h2><blockquote>
<p>参考书目: 《Go程序设计语言》</p>
</blockquote>
<h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><p>如下是hello world程序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// hello.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>终端执行 <code>go run hello.go</code>。</p>
<p>Go代码是用包来组织的，包类似于其他语言中的库和模块。</p>
<p><code>package main</code>指明了这个文件属于哪个包。</p>
<p>后面跟着导入的是其他包的列表，fmt用于格式化输出和扫描输入。</p>
<p>main包比较特殊，它用来定义一个独立的可执行程序，而不是库。import声明必须跟在package声明之后。import导入声明后，是组成程序的函数。</p>
<p>一个函数的声明由func关键字、函数名、参数列表(main函数为空)、返回值列表和函数体构成。</p>
<h6 id="命令行参数"><a href="#命令行参数" class="headerlink" title="命令行参数"></a>命令行参数</h6><p>命令行参数以os包中Args名字的变量供程序访问，在os包外面，使用os.Args这个名字，这是一个字符串slice。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// echo.go 输出命令行参数</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> s<span class="token punctuation">,</span> sep <span class="token builtin">string</span>
    <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token function">len</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">&#123;</span>
        s <span class="token operator">+=</span> sep <span class="token operator">+</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        sep <span class="token operator">=</span> <span class="token string">" "</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ go build echo.go
.&#x2F;echo hello
hello<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>var 关键字声明了两个string类型的变量s和sep。变量可以声明的时候初始化。如果变量没有明确地初始化，它将隐式初始化这个类型的空值。</p>
<p>for 是 go里面唯一的循环语句。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">for</span> initlization<span class="token punctuation">;</span> condition<span class="token punctuation">;</span> post <span class="token punctuation">&#123;</span>
    <span class="token comment">//语句</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>可选的initialization(初始化)语句在循环开始之前执行。如果存在，它必须是一个简单的语句。三部分都是可省的，如果三部分都不存在，只有一个for，那就是无限循环。</p>
<p>另一种形式的for循环是在字符串或slice数据上迭代。</p>
<p>如下是第二种echo程序：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// echo.go</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> s<span class="token punctuation">,</span> sep <span class="token builtin">string</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        s <span class="token operator">+=</span> sep <span class="token operator">+</span> arg
        sep <span class="token operator">=</span> <span class="token string">" "</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每一次迭代，range都产生一对值: 索引和这个索引处元素的值。因为这个例子里用不到索引，但是语法上range循环需要处理。应次也必须处理索引。可以将索引赋予一个临时变量，然后忽略它，但是<strong>go不允许存在无用的变量</strong>。选择使用<strong>空标识符</strong>“__”。空标识符可以用在任何语法需要变量名但逻辑不需要的地方。</p>
<p>如果有大量的数据要处理，这样做的代价会比较大。可以使用strings包中的<code>Join</code>函数。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"os"</span>
    <span class="token string">"strings"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="找出重复行"><a href="#找出重复行" class="headerlink" title="找出重复行"></a>找出重复行</h6><p>如下程序要输出标准输入中出现次数大于1的行，前面是次数。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"bufio"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    counts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    input <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">)</span>
    <span class="token keyword">for</span> input<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        counts<span class="token punctuation">[</span>input<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> line<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> counts <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\t%s\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> line<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在上述这个程序中，引入了if语句、map类型和bufio包。</p>
<p>像for一样，if语句中的条件部分也从不放在圆括号里。</p>
<p>map存储一个键值对集合。在这里map的键是字符串，值是数字。内置的函数make可以用来新建map，它还可以有其他用途。</p>
<p><code>counts := make(map[string]int)</code></p>
<p>每次从输入读取一行内容，这一行就作为map中的键，对应的值递增1。键在map中不存在时也是没有问题的。为了输出结果，使用基于range的for循环。</p>
<p>bufio包，使用它可以简便和高效地处理输入和输出。其中一个最有用的特性是称为扫描器(Scanner)的类型，可以读取输入，以行或者单词为单位断开。</p>
<p><code>input := bufio.NewScanner(os.Stdin)</code></p>
<p>Printf函数有超过10个转义字符：</p>
<table>
<thead>
<tr>
<th>verb</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>十进制整数</td>
</tr>
<tr>
<td>%x,%o,%b</td>
<td>十六进制、八进制、二进制整数</td>
</tr>
<tr>
<td>%f,%g,%e</td>
<td>浮点数</td>
</tr>
<tr>
<td>%t</td>
<td>布尔类型</td>
</tr>
<tr>
<td>%c</td>
<td>字符</td>
</tr>
<tr>
<td>%s</td>
<td>字符串</td>
</tr>
<tr>
<td>%q</td>
<td>带引号字符串</td>
</tr>
<tr>
<td>%v</td>
<td>内置格式的任何值</td>
</tr>
<tr>
<td>%T</td>
<td>任何值的类型</td>
</tr>
<tr>
<td>%%</td>
<td>百分号本身</td>
</tr>
</tbody></table>
<p>如下是从文件中读取字符串：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"bufio"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    counts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    files <span class="token operator">:=</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token function">len</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
        <span class="token function">countLines</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdin<span class="token punctuation">,</span> counts<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> arg <span class="token operator">:=</span> <span class="token keyword">range</span> files <span class="token punctuation">&#123;</span>
            f<span class="token punctuation">,</span> err <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
                fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"dup: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
                <span class="token keyword">continue</span>
            <span class="token punctuation">&#125;</span>
            <span class="token function">countLines</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> counts<span class="token punctuation">)</span>
            f<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> line<span class="token punctuation">,</span> n <span class="token operator">:=</span> <span class="token keyword">range</span> counts <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\t%s\n"</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> line<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">countLines</span><span class="token punctuation">(</span>f <span class="token operator">*</span>os<span class="token punctuation">.</span>File<span class="token punctuation">,</span> counts <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    input <span class="token operator">:=</span> bufio<span class="token punctuation">.</span><span class="token function">NewScanner</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
    <span class="token keyword">for</span> input<span class="token punctuation">.</span><span class="token function">Scan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        counts<span class="token punctuation">[</span>input<span class="token punctuation">.</span><span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>读取的文件如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ cat test.txt
AAAAAAAA
BBBBBBB
AAAAAAAA
CCCCCCC
HHHHHH<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>输入如下：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ .&#x2F;main test.txt
2       AAAAAAAA<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>上述程序是采用”流式”模式读取输入，然后按需拆分为行。</p>
<p>这里引入一个ReadFile函数(从io&#x2F;ioutil包导入)，它读取整个命名文件的内容，还引入一个strings.Split函数，将一个字符串分割为一个由子串组成的slice：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io/ioutil"</span>
    <span class="token string">"os"</span>
    <span class="token string">"strings"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    counts <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>filename <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        data<span class="token punctuation">,</span>err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span><span class="token string">"dup: %v\n"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
            <span class="token keyword">continue</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>line <span class="token operator">:=</span> <span class="token keyword">range</span> strings<span class="token punctuation">.</span><span class="token function">Split</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"\n"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            counts<span class="token punctuation">[</span>line<span class="token punctuation">]</span><span class="token operator">++</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> line<span class="token punctuation">,</span>n <span class="token operator">:=</span> <span class="token keyword">range</span> counts <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> n <span class="token operator">></span> <span class="token number">1</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%d\t%s\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>line<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>ReadFile函数返回一个可以转化成字符串的字节slice，这样它可以被strings.Split分割。</p>
<h6 id="获取一个URL"><a href="#获取一个URL" class="headerlink" title="获取一个URL"></a><strong>获取一个URL</strong></h6><p>Go提供了一系列包，在net包下面分组管理，使用它们可以方便地通过互联网发送和接受信息。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io/ioutil"</span>
    <span class="token string">"net/http"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span>url <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        resp<span class="token punctuation">,</span>err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span><span class="token string">"fetch: %v\n"</span><span class="token punctuation">,</span>err<span class="token punctuation">)</span>
            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        b<span class="token punctuation">,</span>err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
        resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span><span class="token string">"fetch: reading %s: %v\n"</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>err<span class="token punctuation">)</span>
            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>程序fetch展示从互联网获取信息的最小需求，它获取每个指定URL的内容，然后不加解析地输出。fetch来自curl工具。 </p>
<p>这个程序使用的函数来自两个包: net&#x2F;http和io&#x2F;ioutil。http.Get函数产生一个HTTP请求，如果没有出错，返回结果存在响应结构resp里面，其中resp的Body域包含服务器端响应的一个可读取数据流。随后ioutil.ReadAll读取整个响应结果并存入b。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io/ioutil"</span>
    <span class="token string">"net/http"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> url <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"fetch: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        b<span class="token punctuation">,</span> err <span class="token operator">:=</span> ioutil<span class="token punctuation">.</span><span class="token function">ReadAll</span><span class="token punctuation">(</span>resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
        resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"fetch: reading %s: %v\n"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>关闭Body数据流来避免资源泄露。</p>
<p>运行结果：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ .&#x2F;fetch https:&#x2F;&#x2F;www.baidu.com
&lt;html&gt;
&lt;head&gt;
        &lt;script&gt;
                location.replace(location.href.replace(&quot;https:&#x2F;&#x2F;&quot;,&quot;http:&#x2F;&#x2F;&quot;));
        &lt;&#x2F;script&gt;
&lt;&#x2F;head&gt;
&lt;body&gt;
        &lt;noscript&gt;&lt;meta http-equiv&#x3D;&quot;refresh&quot; content&#x3D;&quot;0;url&#x3D;http:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;&gt;&lt;&#x2F;noscript&gt;
&lt;&#x2F;body&gt;
&lt;&#x2F;html&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>也可将程序改写：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io"</span>
    <span class="token string">"net/http"</span>
    <span class="token string">"os"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> url <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
            <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"fetch: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
            os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">&#123;</span>
            written<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
            <span class="token keyword">if</span> written <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">break</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
                <span class="token boolean">_</span><span class="token punctuation">,</span> err <span class="token operator">=</span> fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stderr<span class="token punctuation">,</span> <span class="token string">"fetch: %v\n"</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>
                os<span class="token punctuation">.</span><span class="token function">Exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h6 id="并发获取多个URL"><a href="#并发获取多个URL" class="headerlink" title="并发获取多个URL"></a>并发获取多个URL</h6><pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"io"</span>
    <span class="token string">"io/ioutil"</span>
    <span class="token string">"net/http"</span>
    <span class="token string">"os"</span>
    <span class="token string">"time"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ch <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">chan</span> <span class="token builtin">string</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> <span class="token boolean">_</span><span class="token punctuation">,</span> url <span class="token operator">:=</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">go</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> ch<span class="token punctuation">)</span> <span class="token comment">// 启动一个goroutine</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> <span class="token keyword">range</span> os<span class="token punctuation">.</span>Args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">&lt;-</span>ch<span class="token punctuation">)</span> <span class="token comment">// 从通道ch接收</span>
    <span class="token punctuation">&#125;</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%.2fs elapsed\n"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url <span class="token builtin">string</span><span class="token punctuation">,</span> ch <span class="token keyword">chan</span><span class="token operator">&lt;-</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    start <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    resp<span class="token punctuation">,</span> err <span class="token operator">:=</span> http<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprint</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    nbytes<span class="token punctuation">,</span> err <span class="token operator">:=</span> io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>ioutil<span class="token punctuation">.</span>Discard<span class="token punctuation">,</span> resp<span class="token punctuation">.</span>Body<span class="token punctuation">)</span>
    resp<span class="token punctuation">.</span>Body<span class="token punctuation">.</span><span class="token function">Close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 防止泄露资源</span>
    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
        ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"while reading %s: %v"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
    <span class="token punctuation">&#125;</span>
    secs <span class="token operator">:=</span> time<span class="token punctuation">.</span><span class="token function">Since</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    ch <span class="token operator">&lt;-</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%.2fs  %7d  %s"</span><span class="token punctuation">,</span> secs<span class="token punctuation">,</span> nbytes<span class="token punctuation">,</span> url<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ .&#x2F;fetchall http:&#x2F;&#x2F;www.baidu.com http:&#x2F;&#x2F;www.qq.com
0.08s   352723  http:&#x2F;&#x2F;www.baidu.com
0.14s   173953  http:&#x2F;&#x2F;www.qq.com
0.14s elapsed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个进程可以并发获取很多URL内容，于是这个进程使用的时间不超过耗时最长时间的任务。这个程序不保存响应内容，但会报告每个响应的大小和花费的时间。</p>
<p>gorotine是一个并发执行的函数。通道是一种允许某一进程向另一种进程传递制定类型的值的通信机制。main函数在一个goroutine中执行，然后go语句创建额外的goroutine。</p>
<p>main函数使用make创建一 个字符串通道。对于每个命令行参数，go语句在第一轮循环中启动一个新的goroutine，它异步调用fetch来使用http.Get获取URL内容。io.Copy函数读取响应的内容，然后通过写入ioutil.Discard输出流进行丢弃。Copy返回字节数和错误信息。每一个结果返回时，fetch发送一行汇总信息到通道ch。main中第二轮循环接收并且输出那些汇总行。</p>
<h6 id="一个WEB服务器"><a href="#一个WEB服务器" class="headerlink" title="一个WEB服务器"></a>一个WEB服务器</h6><p>如下代码，实现一个简单的服务器，将返回服务器URL路径部分：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"log"</span>
	<span class="token string">"net/http"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"localhost:8000"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"URL.Path = %q\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ .&#x2F;fetch http:&#x2F;&#x2F;localhost:8000&#x2F;help
URL.Path &#x3D; &quot;&#x2F;help&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>这里的库函数做了大部分工作。main函数将一个处理函数和以&#x2F;开头的URL链接在一起，代表所有的URL使用这个函数处理，然后启动服务器监听8000端口处的请求。一个请求由http.Request类型的结构体表示，它包含很多关联的域，其中一个是所请求的URL。当一个请求到达时，它被转交给处理函数，并从请求的URL中提取路径部分，使用fmt.Printf格式化，然后作为响应发送回去。</p>
<p>为服务器添加功能也很简单，如下程序会返回收到的请求数量：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"log"</span>
	<span class="token string">"net/http"</span>
	<span class="token string">"sync"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> mu sync<span class="token punctuation">.</span>Mutex
<span class="token keyword">var</span> count <span class="token builtin">int</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/count"</span><span class="token punctuation">,</span> counter<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"localhost:8000"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	count<span class="token operator">++</span>
	mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"URL.Path = %q\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">.</span>Path<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 回显目前为止调用的次数</span>
<span class="token keyword">func</span> <span class="token function">counter</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	mu<span class="token punctuation">.</span><span class="token function">Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Count %d\n"</span><span class="token punctuation">,</span> count<span class="token punctuation">)</span>
	mu<span class="token punctuation">.</span><span class="token function">Unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ .&#x2F;fetch http:&#x2F;&#x2F;localhost:8000&#x2F;
URL.Path &#x3D; &quot;&#x2F;&quot;
$ .&#x2F;fetch http:&#x2F;&#x2F;localhost:8000&#x2F;
URL.Path &#x3D; &quot;&#x2F;&quot;
$ .&#x2F;fetch http:&#x2F;&#x2F;localhost:8000&#x2F;count
Count 2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这个服务器有两个处理函数，通过请求的URL来决定哪一个被调用: 请求&#x2F;count调用counter，其他的调用handler。</p>
<p>以&#x2F;结尾的处理模式匹配所有含有这个前缀的URL。在后台，对于每个传入的请求，服务器在不同的goroutine中运行该处理函数，这样它可以同时处理多个请求。</p>
<p>然而，如果两个并发的请求试图同时更新计数值count，count可能会不一致地增加，程序会产生一个严重的竞态BUG。为了避免该问题，必须确保最多只有一个goroutine在同一时间访问变量，这正是mu.Lock()和mu.Unlock()语句的作用。</p>
<p>修改处理函数，使其可以报告接收到的消息头和表单数据，这样可以方便服务器审查和调试请求。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">"fmt"</span>
	<span class="token string">"log"</span>
	<span class="token string">"net/http"</span>
<span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	http<span class="token punctuation">.</span><span class="token function">HandleFunc</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span>
	log<span class="token punctuation">.</span><span class="token function">Fatal</span><span class="token punctuation">(</span>http<span class="token punctuation">.</span><span class="token function">ListenAndServe</span><span class="token punctuation">(</span><span class="token string">"localhost:8000"</span><span class="token punctuation">,</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">handler</span><span class="token punctuation">(</span>w http<span class="token punctuation">.</span>ResponseWriter<span class="token punctuation">,</span> r <span class="token operator">*</span>http<span class="token punctuation">.</span>Request<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"%s %s %s\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Method<span class="token punctuation">,</span> r<span class="token punctuation">.</span>URL<span class="token punctuation">,</span> r<span class="token punctuation">.</span>Proto<span class="token punctuation">)</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>Header <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Header[%q] = %q\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Host = %q\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>Host<span class="token punctuation">)</span>
	fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"RemoteAddr = %q\n"</span><span class="token punctuation">,</span> r<span class="token punctuation">.</span>RemoteAddr<span class="token punctuation">)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> r<span class="token punctuation">.</span><span class="token function">ParseForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>
		log<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token operator">:=</span> <span class="token keyword">range</span> r<span class="token punctuation">.</span>Form <span class="token punctuation">&#123;</span>
		fmt<span class="token punctuation">.</span><span class="token function">Fprintf</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> <span class="token string">"Form[%q] = %q\n"</span><span class="token punctuation">,</span> k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ .&#x2F;fetch http:&#x2F;&#x2F;localhost:8000&#x2F;
GET &#x2F; HTTP&#x2F;1.1
Header[&quot;User-Agent&quot;] &#x3D; [&quot;Go-http-client&#x2F;1.1&quot;]
Header[&quot;Accept-Encoding&quot;] &#x3D; [&quot;gzip&quot;]
Host &#x3D; &quot;localhost:8000&quot;
RemoteAddr &#x3D; &quot;127.0.0.1:47766&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="程序结构"><a href="#程序结构" class="headerlink" title="程序结构"></a>程序结构</h4><p>声明是给一个程序实体<strong>命名</strong>，并且设定其部分或全部属性。有4个主要声明: 变量(var)、常量(const)、类型(type)函数(func)。</p>
<p>Go程序存储在一个或多个以.go为后缀的文件里。每一个文件以package声明开头，表明文件属于哪个包。package  声明后面是import声明，然后是<em>包级别</em>的类型、变量、常量、函数的声明，不区分顺序。</p>
<p>例如，下面的程序声明一个常量、一个函数和一对变量：</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token comment">// 输出水的沸点</span>
<span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">const</span> boilingF <span class="token operator">=</span> <span class="token number">212.0</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> f <span class="token operator">=</span> boilingF
    <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">9</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"boiling point = %g F or %g C\n"</span><span class="token punctuation">,</span> f<span class="token punctuation">,</span> c<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 输出: boiling point = 212 F or 100 C</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>常量boilingF是一个包级别的声明(main包)，f和c是属于main函数的局部变量。包级别的实体名字不仅对于包含其声明的源文件可见，而且对于同一个包里面的所有源文件可见。</p>
<p>另一方面，局部声明仅仅是在声明所在的函数内部可见，并且可能对于函数中的一小块区域可见。</p>
<p><strong>函数的声明</strong>包含一个名字、参数列表(由函数的调用者提供的变量)、一个可选的返回值列表，以及函数体。</p>
<p>下面的函数fToC封装了温度转换的逻辑，这样可以只定义一次而在多个地方使用。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">"fmt"</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> freezingF<span class="token punctuation">,</span> boilingF <span class="token operator">=</span> <span class="token number">32.0</span><span class="token punctuation">,</span> <span class="token number">212.0</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%g F = %g C\n"</span><span class="token punctuation">,</span> freezingF<span class="token punctuation">,</span> <span class="token function">fToC</span><span class="token punctuation">(</span>freezingF<span class="token punctuation">)</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">"%g F = %g C\n"</span><span class="token punctuation">,</span> boilingF<span class="token punctuation">,</span> <span class="token function">fToC</span><span class="token punctuation">(</span>boilingF<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">func</span> <span class="token function">fToC</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>f <span class="token operator">-</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">/</span> <span class="token number">9</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/* 输出:
32 F = 0 C
212 F = 100 C
*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>通用形式: <code>var name type = expression</code>。</p>
<p>类型和表达式部分可以省略一个，但不能都省略。</p>
<p>如果类型省略，它的类型将由初始化表达式决定。如果表达式省略，其初始值对应于类型的零值，因此Go中不存在未初始化变量。</p>
<h6 id="短变量声明"><a href="#短变量声明" class="headerlink" title="短变量声明"></a>短变量声明</h6><p>在函数中，一种称作<strong>短变量声明</strong>的可选形式可以用来初始化局部变量。</p>
<p>形式: <code>name := expression</code>，name的类型由expression的类型来决定。</p>
<p>在局部变量的声明和初始化主要使用短声明。</p>
<p>var声明通常是为那些跟初始化表达式类型不一致的局部变量保留的，或者用于后面才对变量赋值以及变量初始值不重要的情况。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">i <span class="token operator">:=</span> <span class="token number">100</span>
<span class="token keyword">var</span> boiling <span class="token builtin">float64</span> <span class="token operator">=</span> <span class="token number">100</span>
i<span class="token punctuation">,</span>j <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<h6 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h6><p>指针的值是一个变量的地址。</p>
<p>如果一个变量声明为<code>var x int</code>，表达式&amp;x获取一个指向整型变量的指针。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go">x <span class="token operator">:=</span> <span class="token number">1</span>          
p <span class="token operator">:=</span> <span class="token operator">&amp;</span>x         <span class="token comment">// p 是整型指针 只想x</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span> <span class="token comment">// "1"</span>
<span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">2</span>          <span class="token comment">// 等价于x = 2</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">// 结果"2"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>每个聚合类型变量的组成都是变量，所以也有一个地址。</p>
<p>指针类型的零值是nil。</p>
<p>函数可以返回局部变量的地址。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span><span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    v <span class="token operator">:=</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token operator">&amp;</span>v
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>因为一个指针包含变量的地址，所以传递一个指针参数给函数，能够让函数更新间接传递的变量值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">func</span> <span class="token function">incr</span><span class="token punctuation">(</span>p <span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token builtin">int</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">*</span>p<span class="token operator">++</span>     <span class="token comment">// 递增p所指向的值 p自身保持不变</span>
    <span class="token keyword">return</span> <span class="token operator">*</span>p
<span class="token punctuation">&#125;</span>

v <span class="token operator">:=</span> <span class="token number">1</span>
<span class="token function">incr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span>     <span class="token comment">// v 等于 2</span>
fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">incr</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">// "3"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>指针对于flag包是很关键的，它使用程序的命令行参数来设置整个程序内某些变量的值。</p>
<pre class="line-numbers language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
    <span class="token string">"flag"</span>
    <span class="token string">"fmt"</span>
    <span class="token string">"strings"</span>
<span class="token punctuation">)</span>

<span class="token keyword">var</span> n <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">Bool</span><span class="token punctuation">(</span><span class="token string">"n"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"omit trailing newline"</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> sep <span class="token operator">=</span> flag<span class="token punctuation">.</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token string">" "</span><span class="token punctuation">,</span> <span class="token string">"separator"</span><span class="token punctuation">)</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    flag<span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    fmt<span class="token punctuation">.</span><span class="token function">Print</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span><span class="token function">Join</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token function">Args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">*</span>sep<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token operator">!</span><span class="token operator">*</span>n <span class="token punctuation">&#123;</span>
        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>flag.Bool函数创建一个新的布尔标识变量，它有3个参数。变量sep和n是指向标识变量的指针，必须通过sep和n来访问。</p>
<p>当程序运行前，在使用标识前，必须调用flag.Parse来更新标识变量的默认值。非标识参数也可以从flag.Args()返回的字符串slice来访问。如果flag.Parse遇到错误，它输出一条帮助信息，然后调用os.Exit(2)来结束程序。</p>
<p>运行示例：</p>
<pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">$ .&#x2F;echo4 a bc def
a bc def
$ .&#x2F;echo4 -s &#x2F; a bc def
a&#x2F;bc&#x2F;def
$ .&#x2F;echo4 -help
Usage of .&#x2F;echo4:
  -n    omit trailing newline
  -s string
        separator (default &quot; &quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记 - 信号</title>
    <url>/2022/04/linux-note-signal/</url>
    <content><![CDATA[<h2 id="Linux-信号"><a href="#Linux-信号" class="headerlink" title="Linux 信号"></a><strong>Linux 信号</strong></h2><p>信号本质上是整数，用户模式下用来模拟硬件中断。</p>
<ul>
<li>什么是硬件中断？先理解为硬件引发的中断。</li>
<li>什么是中断？简言之，就是让CPU停下当前干的事转而去处理新的情况。</li>
<li>信号是谁产生的？可以由硬件、内核和进程产生。</li>
</ul>
<p>例如在终端上用<code>Ctrl+C</code>，可以结束掉当前终端进程，本质上是发送SIGINT信号。</p>
<p>如下是一个实例程序，该程序循环打印数字。运行起来，看看<code>Ctrl+C</code>能不能中止它：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>

<span class="token keyword">void</span> <span class="token function">hand</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"val: %d\n"</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Do you want to kill me? No way!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span>hand<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n:%d\n"</span><span class="token punctuation">,</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如下所示，现在使用Ctrl+C是没办法中断这个程序的：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-1.png" alt="signal-1"></p>
<p>这里可以用man命令查看一下signal函数的帮助文档：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-2.png" alt="signal-2"></p>
<p>signal关联上了一个信号处理函数，来处理信号。</p>
<p>现在修改这个代码，添加一行打印当前进程号，然后打开两个终端，一个终端运行上面的程序，一个终端尝试<code>kill</code>命令来发送信号：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-3.png" alt="signal-3"></p>
<p>kill 要指定参数：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-4.png" alt="signal-4"></p>
<p>这是可行的，结果如上。</p>
<p><strong>信号处理的过程</strong></p>
<p>进程A在运行，内核、硬件或者其他进程发送信号给进程A。进程A接收到信号后，直接做信号本身规定的对应处理或者做事先注册好的信号处理。如上面signal函数就是注册信号处理，hand函数替换了本身默认的信号处理。当然信号是可以屏蔽的，不作任何处理。</p>
<p>Linux有哪些信号类型：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-5.png" alt="signal-5"></p>
<p> Linux 信号有64个，分为不可靠信号(非实时，1-31，Unix提供)和可靠信号(32-64，后来扩充的)。又有系统自带的标准信号和用户自定义的信号。</p>
<p>介绍几个命令或函数：</p>
<ul>
<li>信号注册：<code>signal</code>、<code>sigaction;</code></li>
<li>信号发送：<code>kill</code>命令、<code>kill</code>函数、<code>sigqueue;</code></li>
<li>信号屏蔽：<code>sigprocmask</code>;</li>
<li>信号集：<code>sigset_t</code>.</li>
</ul>
<p>下面写一个发送信号的程序：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sig <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid:%d  sig:%d\n"</span><span class="token punctuation">,</span>pid<span class="token punctuation">,</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">kill</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span>sig<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://oss.chundot.xyz/picgo/signal-6.png" alt="signal-6"></p>
<p><img src="https://oss.chundot.xyz/picgo/signal-7.png" alt="signal-7"></p>
<p>成功发送了信号。</p>
<p><code>sigaction</code>函数有所不同，功能更多：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-8.png" alt="signal-8"></p>
<p>这里用到了一个结构体：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-9.png" alt="signal-9"></p>
<p>结构体的第一个成员依然是原来的信号处理函数，第二个成员被称作高级信号处理函数，第三个成员用于信号屏蔽，剩下两个暂时还用不到。</p>
<p>这个函数不仅可以发信号、做信号处理，还可以接收信号的同时接收数据</p>
<p>下列代码使用了高级信号处理：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>

<span class="token comment">// 基本信号处理函数</span>
<span class="token keyword">void</span> <span class="token function">hand</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"基本信号处理函数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 高级信号处理函数</span>
<span class="token keyword">void</span> <span class="token function">handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token class-name">siginfo_t</span><span class="token operator">*</span> siginfo<span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> arg<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"高级信号处理函数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n:%d msg:%d\n"</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span>siginfo<span class="token operator">-></span>si_int<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> old_act <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> hand<span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_sigaction <span class="token operator">=</span> handler<span class="token punctuation">;</span>
    act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_SIGINFO<span class="token punctuation">;</span>

    <span class="token comment">// 高级信号处理</span>
    <span class="token function">sigaction</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>act<span class="token punctuation">,</span><span class="token operator">&amp;</span>old_act<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid:%d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n:%d\n"</span><span class="token punctuation">,</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>同时还要实现高级的信号发送，采用<code>sigqueue</code>：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-10.png" alt="signal-10"></p>
<p>这里有个重要的联合体，用来存储数据和信号一起发送：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-11.png" alt="signal-11"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>  
    <span class="token keyword">int</span> pid <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> sig <span class="token operator">=</span> <span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid:%d  sig:%d\n"</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">union</span> sigval u<span class="token punctuation">;</span>
    u<span class="token punctuation">.</span>sival_int <span class="token operator">=</span> <span class="token number">12345678</span><span class="token punctuation">;</span>
    <span class="token function">sigqueue</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span>sig<span class="token punctuation">,</span>u<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果如下：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-12.png"></p>
<p><img src="https://oss.chundot.xyz/picgo/signal-13.png" alt="signal-13"></p>
<p>可以看到程序接收到了信号和数据。</p>
<p>也试试发送其他数据，联合体中还有一个指针类型的成员。</p>
<h2 id="Linux信号-续"><a href="#Linux信号-续" class="headerlink" title="Linux信号(续)"></a>Linux信号(续)</h2><blockquote>
<p>参考网站: Github、《极客时间》</p>
</blockquote>
<p>现在从底层角度来观赏Linux信号机制。</p>
<p>首先看信号的具体作用：</p>
<p><img src="https://oss.chundot.xyz/picgo/signal-14.png" alt="signal-14"></p>
<p><img src="https://oss.chundot.xyz/picgo/signal-15.png" alt="signal-15"></p>
<p>如上文所提，处理信号有3种方式：执行默认操作，捕获信号和忽略信号</p>
<p>设置信号处理有两种方式: signal和sigaction</p>
<p>signal将一个动作和信号关联，sigaction也是将一个动作和信号关联，但这个动作用一个结构体表示了，处理信号将更加细致</p>
<p>siganal不是系统调用，而是glibc封装的一个函数，实现如下：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span>  <span class="token directive keyword">define</span> <span class="token macro-name">signal</span> <span class="token expression">__sysv_signal</span></span>
__sighandler_t
<span class="token function">__sysv_signal</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> __sighandler_t handler<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> act<span class="token punctuation">,</span> oact<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  act<span class="token punctuation">.</span>sa_handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>
  <span class="token function">__sigemptyset</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token punctuation">.</span>sa_mask<span class="token punctuation">)</span><span class="token punctuation">;</span>
  act<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> SA_ONESHOT <span class="token operator">|</span> SA_NOMASK <span class="token operator">|</span> SA_INTERRUPT<span class="token punctuation">;</span>
  act<span class="token punctuation">.</span>sa_flags <span class="token operator">&amp;=</span> <span class="token operator">~</span>SA_RESTART<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">__sigaction</span> <span class="token punctuation">(</span>sig<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token punctuation">,</span> <span class="token operator">&amp;</span>oact<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> SIG_ERR<span class="token punctuation">;</span>
  <span class="token keyword">return</span> oact<span class="token punctuation">.</span>sa_handler<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">weak_alias</span> <span class="token punctuation">(</span>__sysv_signal<span class="token punctuation">,</span> sysv_signal<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里可以看到 sa_flags 设置了一个SA_ONESHOT，这意味着信号处理函数只作用一次，用完一次后就返回默认行为</p>
<p>同时设置了SA_NOMASK，通过 __sigemptyset，将 sa_mask 设置为空。这样的设置表示在这个信号处理函数执行过程中，如果再有其他信号，哪怕相同的信号到来的时候，这个信号处理函数会被中断。如果一个信号处理函数真的被其他信号中断，问题也不大，因为当处理完了其他的信号处理函数后，还会回来接着处理这个信号处理函数的，但是对于相同的信号就有点尴尬了。一般的思路应该是，当某一个信号的信号处理函数运行的时候，暂时屏蔽这个信号，屏蔽并不意味着信号一定丢失，而是暂存，这样能够做到信号处理函数对于相同的信号，处理完一个再处理下一个，这样信号处理函数的逻辑要简单得多。</p>
<p>还有一个设置就是设置了 SA_INTERRUPT，清除了 SA_RESTART。信号的到来时间是不可预期的，有可能程序正在调用某个漫长的系统调用的时候，突然到来一个信号，中断了这个系统调用，去执行信号处理函数。那么执行完后信号处理函数，系统调用怎么办？</p>
<p>时候有两种处理方法，一种就是 SA_INTERRUPT，也即系统调用被中断了，就不再重试这个系统调用了，而是直接返回一个 -EINTR 常量，告诉调用方，这个系统调用被信号中断了，调用方可以根据自己的逻辑，重新调用或者直接返回，这会使得代码非常复杂，在所有系统调用的返回值判断里面，都要特殊判断一下这个值。</p>
<p>另外一种处理方法是 SA_RESTART。这个时候系统调用会被自动重新启动，不需要调用方自己写代码。当然也可能存在问题，例如从终端读入一个字符，这个时候用户在终端输入一个’a’字符，在处理’a’字符的时候被信号中断了，等信号处理完毕，再次读入一个字符的时候，如果用户不再输入，就停在那里了，需要用户再次输入同一个字符。</p>
<p>可知signal函数是受到限制的，因此，建议使用 sigaction 函数，根据自己的需要定制参数。</p>
<p>下面是glibc中的实现：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span>
<span class="token function">__sigaction</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oact<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token keyword">return</span> <span class="token function">__libc_sigaction</span> <span class="token punctuation">(</span>sig<span class="token punctuation">,</span> act<span class="token punctuation">,</span> oact<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">int</span>
<span class="token function">__libc_sigaction</span> <span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">sigaction</span> <span class="token operator">*</span>oact<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> result<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">kernel_sigaction</span> kact<span class="token punctuation">,</span> koact<span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span>act<span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      kact<span class="token punctuation">.</span>k_sa_handler <span class="token operator">=</span> act<span class="token operator">-></span>sa_handler<span class="token punctuation">;</span>
      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>kact<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>act<span class="token operator">-></span>sa_mask<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">sigset_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      kact<span class="token punctuation">.</span>sa_flags <span class="token operator">=</span> act<span class="token operator">-></span>sa_flags <span class="token operator">|</span> SA_RESTORER<span class="token punctuation">;</span>


      kact<span class="token punctuation">.</span>sa_restorer <span class="token operator">=</span> <span class="token operator">&amp;</span>restore_rt<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


  result <span class="token operator">=</span> <span class="token function">INLINE_SYSCALL</span> <span class="token punctuation">(</span>rt_sigaction<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>
                           sig<span class="token punctuation">,</span> act <span class="token operator">?</span> <span class="token operator">&amp;</span>kact <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
                           oact <span class="token operator">?</span> <span class="token operator">&amp;</span>koact <span class="token operator">:</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> _NSIG <span class="token operator">/</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oact <span class="token operator">&amp;&amp;</span> result <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
      oact<span class="token operator">-></span>sa_handler <span class="token operator">=</span> koact<span class="token punctuation">.</span>k_sa_handler<span class="token punctuation">;</span>
      <span class="token function">memcpy</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>oact<span class="token operator">-></span>sa_mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>koact<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span> <span class="token keyword">sizeof</span> <span class="token punctuation">(</span><span class="token class-name">sigset_t</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      oact<span class="token operator">-></span>sa_flags <span class="token operator">=</span> koact<span class="token punctuation">.</span>sa_flags<span class="token punctuation">;</span>
      oact<span class="token operator">-></span>sa_restorer <span class="token operator">=</span> koact<span class="token punctuation">.</span>sa_restorer<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> result<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>内核代码注释表明，系统调用 signal 是为了兼容过去，系统调用 sigaction 也是为了兼容过去，连参数都变成了 struct compat_old_sigaction，所以说，我们的库函数虽然调用的是 sigaction，到了系统调用层，调用的可不是系统调用 sigaction，而是系统调用 rt_sigaction。</p>
<p>在 <code>rt_sigaction</code> 里面，将用户态的 struct sigaction 结构，拷贝为内核态的 <code>k_sigaction</code>，然后调用 <code>do_sigaction</code>。</p>
<p><code>do_sigaction</code> 也很简单，进程内核的数据结构里，struct task_struct 里面有一个成员 sighand，里面有一个 action。</p>
<p>这是一个数组，下标是信号，内容就是信号处理函数，<code>do_sigaction</code> 就是设置 sighand 里的信号处理函数。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">do_sigaction</span><span class="token punctuation">(</span><span class="token keyword">int</span> sig<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">k_sigaction</span> <span class="token operator">*</span>act<span class="token punctuation">,</span> <span class="token keyword">struct</span> <span class="token class-name">k_sigaction</span> <span class="token operator">*</span>oact<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">struct</span> <span class="token class-name">task_struct</span> <span class="token operator">*</span>p <span class="token operator">=</span> current<span class="token punctuation">,</span> <span class="token operator">*</span>t<span class="token punctuation">;</span>
  <span class="token keyword">struct</span> <span class="token class-name">k_sigaction</span> <span class="token operator">*</span>k<span class="token punctuation">;</span>
  <span class="token class-name">sigset_t</span> mask<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  k <span class="token operator">=</span> <span class="token operator">&amp;</span>p<span class="token operator">-></span>sighand<span class="token operator">-></span>action<span class="token punctuation">[</span>sig<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>


  <span class="token function">spin_lock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>sighand<span class="token operator">-></span>siglock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>oact<span class="token punctuation">)</span>
    <span class="token operator">*</span>oact <span class="token operator">=</span> <span class="token operator">*</span>k<span class="token punctuation">;</span>


  <span class="token keyword">if</span> <span class="token punctuation">(</span>act<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">sigdelsetmask</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>act<span class="token operator">-></span>sa<span class="token punctuation">.</span>sa_mask<span class="token punctuation">,</span>
            <span class="token function">sigmask</span><span class="token punctuation">(</span>SIGKILL<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">sigmask</span><span class="token punctuation">(</span>SIGSTOP<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token operator">*</span>k <span class="token operator">=</span> <span class="token operator">*</span>act<span class="token punctuation">;</span>
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
  <span class="token punctuation">&#125;</span>


  <span class="token function">spin_unlock_irq</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>p<span class="token operator">-></span>sighand<span class="token operator">-></span>siglock<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>总结：</p>
<p><img src="https://static001.geekbang.org/resource/image/7c/28/7cb86c73b9e73893e6b0e0433d476928.png"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记 - 文件I/O</title>
    <url>/2022/03/linux-note-file-io/</url>
    <content><![CDATA[<h2 id="Linux-文件系统结构"><a href="#Linux-文件系统结构" class="headerlink" title="Linux 文件系统结构"></a>Linux 文件系统结构</h2><p>文件结构是文件存放在磁盘等存储设备中的组织方法，主要体现在对文件和目录的组织上，目录提供了管理文件的一个方便而有效的途径，用户能够从一个目录切换到另一个目录，而且可以设置目录和文件的权限，设置文件的共享程度。</p>
<p>Linux 文件系统是目录和文件的一种层次安排，目录的起点称为<strong>根</strong>(root)，其名字是一个字符<code>/</code>目录(directory)是一个包含目录项的文件，在逻辑上可以认为每个目录都包含一个文件名，同时包含说明该文件的信息 ，文件属性是文件类型、文件长度、文件所有者、文件许可权(其他用户是否能访问该文件)、文件最后修改的时间等。</p>
<p>使用 Linux 的用户可以设置目录和文件的权限，以便允许或拒绝其他人对其进行访问，Linux 目录采用多级树形等级结构，用户可以浏览整个系统，可以进入如何一个已授权进入的目录，访问那里的文件。</p>
<p>文件结构的相互关联性使共享数据变得很容易，几个用户可以访问同一个文件。</p>
<p>Linux 是一个<strong>多用户系统</strong>，操作系统本身的驻留程序存放在以根目录开始的专用目录中，有时被指定为系统目录。 <strong>内核</strong>、<strong>Shell</strong>和<strong>文件结构</strong>一起形成了 Linux 的基本操作系统结构。它们使得用户可以允许程序， 管理文件及使用系统。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320093722657.png" alt="image-20220320093722657"></p>
<h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><p>在终端输入<code>ls -l</code>命令 系统会打印处当前目录下所有文件的信息。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320100405899.png" alt="image-20220320100405899"></p>
<p>这些信息包括：<strong>文件类型</strong>、<strong>文件属性</strong>、<strong>用户名</strong>、<strong>用户所在组</strong>、<strong>文件大小</strong>、<strong>修改时间</strong>、<strong>文件名</strong>等。</p>
<p>而其中的第一栏信息是文件类型和文件属性 包含了 10 个字符 分为 4 组：</p>
<ul>
<li>第<strong>1</strong>位表示文件的类型；</li>
<li>第 2 组为<strong>2-4</strong>位 代表文件所有者(User)权限，分别为<strong>读</strong>、<strong>写</strong>、<strong>执行</strong>；</li>
<li>第 3 组为<strong>5-7</strong>位代表文件所有者的同组用户(Group)的权限，分别为<strong>读</strong>、<strong>写</strong>、<strong>执行</strong>；</li>
<li>第 4 组为<strong>8-10</strong>位 代表其他组用户(Other)权限，分别为<strong>读</strong>、<strong>写</strong>、<strong>执行</strong>。</li>
</ul>
<ol>
<li><strong>普通文件</strong>：符号是 - 例如保存在磁盘上的 C 文件、可执行的文件以及目录等，这种文件的特性是数据在存储 设备上存放，内核提供了对数据的抽象访问，此种文件为一种<strong>字节流</strong>，访问接口完全独 立于磁盘上的存储数据 ；</li>
<li><strong>目录文件</strong>：符号是 d ；</li>
<li><strong>字符设备文件</strong>：符号是 c ，是一种能够像文件一样被访问的设备，例如控制台、串口等 ；</li>
<li><strong>块设备文件</strong>：符号是 b 磁盘是此类设备文件的典型代表，与普通文件的区别是操作系统对数据的访问进行的<strong>重新的格式设计</strong> ；</li>
<li><strong>符号链接文件</strong>：符号是 l ；</li>
<li><strong>socket 文件</strong>：是 UNIX 中通过网络进行通信的方式，对网络的访问可以通过文件描述符实现，访问网络和访问普通文件相似。</li>
</ol>
<p>在 Linux 中用户空间对各种文件的操作是类似的，因为虚拟文件系统 VFS 同一套 API。</p>
<h4 id="简单实验"><a href="#简单实验" class="headerlink" title="简单实验"></a>简单实验</h4><p>文件系统的创建：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320100449488.png" alt="image-20220320100449488"></p>
<h3 id="基于文件描述符的-IO-操作"><a href="#基于文件描述符的-IO-操作" class="headerlink" title="基于文件描述符的 IO 操作"></a>基于文件描述符的 IO 操作</h3><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p>操作系统内核(kernel)利用文件描述符(file descriptor)来访问文件。</p>
<p>文件描述符是一个非负整数，是一个用于描述被打开文件的索引值，它指向该文件的相关信息的记录表。</p>
<p>当内核打开一个现存文或创建一个新文件时，就会返回一个文件描述符，当读、写文件时， 也需要使用文件描述符来指定待读写的文件。</p>
<h5 id="POSIX-可移植操作系统接口"><a href="#POSIX-可移植操作系统接口" class="headerlink" title="POSIX 可移植操作系统接口"></a>POSIX 可移植操作系统接口</h5><p>文件描述符的有效范围是 0 到 OPEN_MAX 一般来说，每个进程最多打开 1024 个文件(0~ 1023)，这个值可以使用 ulimit -n 命令查看。</p>
<p>文件描述符是由无符号整数表示的句柄，进程使用它来标识打开的文件。</p>
<p>文件描述符与包括相关信息(如文件的打开模式、文件的位置类型、文件的初始类型等)的文件对象相关联，这些信息被称作文件的<strong>上下文</strong>。</p>
<h5 id="标准输入、标准输出和标准出错"><a href="#标准输入、标准输出和标准出错" class="headerlink" title="标准输入、标准输出和标准出错"></a>标准输入、标准输出和标准出错</h5><p>在 UNIX\Linux 系统中，每当运行一个新程序时，所有的 shell 都为其打开 3 个文件描述符： 标准输入、标准输出及标准出错，分别对应 0 1 2。</p>
<h4 id="文件的创建、打开和关闭"><a href="#文件的创建、打开和关闭" class="headerlink" title="文件的创建、打开和关闭"></a>文件的创建、打开和关闭</h4><p>要对一个文件进行操作，首先要求这个文件<strong>存在</strong>，其次是要在操作之前将这个文件<strong>打开</strong>，这样才能实现对该文件的操作，当完成操作后，则必须将文件关闭，文件的创建、打开与关闭是文件 I&#x2F;O 操作的第一步。</p>
<h5 id="open-函数"><a href="#open-函数" class="headerlink" title="open 函数"></a>open 函数</h5><p>调用<code>open</code>函数可以打开或创建一个文件。</p>
<p>函数原型：<code>int open(const char* pathname,int flags);</code></p>
<p>增加一个参数：<code>int open(const char* pathname,int flags,mode_t mode);</code></p>
<p>返回值：若成功则返回文件描述符，若出错则返回-1。其中参数<code>pathname</code>是一个字符串指针，指向需要打开(或创建)文件的<strong>绝对路径名</strong>或<strong>相对路径名</strong>。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101157474.png" alt="image-20220320101157474"></p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320102217610.png" alt="image-20220320102217610"></p>
<p><code>mode</code>取值：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320102222415.png" alt="image-20220320102222415"></p>
<h6 id="案例程序"><a href="#案例程序" class="headerlink" title="案例程序"></a>案例程序</h6><p><img src="https://oss.chundot.xyz/picgo/image-20220320102302686.png" alt="image-20220320102302686"></p>
<p>将<code>FLAGS</code>定义为：只写，不存在则创建，文件长度截短为 0。</p>
<p>定义<code>mode</code>:创建文件的权限为用户读写执行，组读、执行，其他用户读、执行。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320102333633.png" alt="image-20220320102333633"></p>
<p>运行程序后创建一个新文件：<code>test.txt</code>。</p>
<p>查看其权限属性，可见恰好与创建时定义的 mode 吻合。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320102355312.png" alt="image-20220320102355312"></p>
<h5 id="creat-函数"><a href="#creat-函数" class="headerlink" title="creat 函数"></a>creat 函数</h5><p>用于创建文件。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101227035.png" alt="image-20220320101227035"></p>
<p>函数原型：<code>creat(const char *pathname,int flags);</code></p>
<p>若成功则返回以只写方式打开的文件描述符，若出错为-1 参数 pathname 和 mode 的含义与 open 函数的含义相同。</p>
<p><code>creat</code>函数等效于<code>open(pathname,O_WRONLY|O_CREAT|O_TRUNC,mode);</code>其有一个不足之处是它以只写方式打开所创建的文件。</p>
<p>在提供 open 的新版本之前，如果要创建一个临时文件，并要先写该文件，然后又读该文件，则必须先调用<code>create</code>、<code>close</code>，然后再调用<code>open</code>。</p>
<h5 id="close-函数"><a href="#close-函数" class="headerlink" title="close 函数"></a>close 函数</h5><p>close 函数用于关闭一个文件。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101434997.png" alt="image-20220320101434997"></p>
<p>若成功则返回 0，若出错则返回-1。</p>
<p>参数<code>fd</code>是需关闭文件的文件描述符 系统调用<code>close</code>不经将释放该文件的描述符，而且也将释放该文件所占的描述表项。</p>
<p>关闭一个文件时也释放该进程加载该文件上所有的记录锁。当一个进程终止时，它所有的打开文件都由内核自动关闭。</p>
<p>文件的定位 每个已打开的文件都有一个与其相关联的<strong>当前文件位移量</strong>，它是一个非负整数，用以度量从文件开始处计算的字节数。</p>
<p>通常，读、写操作都从当前文件位移量处开始，并且使位移量增加所读或写的字节数。</p>
<p>系统默认设置位移量为 0。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101454081.png" alt="image-20220320101454081"></p>
<p>可以调用<code>lseek</code>函数显式地定位一个打开文件 若成功则返回新的文件位移量，出错则返回-1。</p>
<p>l 表示长整型 参数<code>fd</code>表示已打开文件的描述符，参数<code>offset</code>表示位移量大小，单位字节，对参数<code>offset</code>的解释于参数<code>whence</code>的取值有关。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101504852.png" alt="image-20220320101504852"></p>
<p>可见当<code>whence</code>取<code>SEEK_CUR</code>和<code>SEEK_END</code>时，可以取负值。</p>
<h6 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h6><p><img src="https://oss.chundot.xyz/picgo/image-20220320102440403.png" alt="image-20220320102440403"></p>
<p>该程序可测试标准输入能否被设置成偏移量：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320102453240.png" alt="image-20220320102453240"></p>
<p>默认标准输入是键盘 从程序的运行结果看出 对于标准输入一般不能设置位移量。</p>
<p>但对系统中文件以及用户创建的一般文件是可以设置位移量的。</p>
<p>通常情况下 文件的当前位移量应当是一个非负整数，但是某些设备也可能允许负的位移量。但对于普通文件，则其位移量必须是非负值。</p>
<p><code>lseek</code>仅将当前的文件位移量记录在内核内，并不能引起如何 I&#x2F;O 操作，然后该位移量用于下一个读或写操作。</p>
<p>文件位移量可以大于文件的当前长度，在这种情况下，对该文件的下一次操作将延长该文件，并在文件中构成一个空洞，这一点是允许的。</p>
<h4 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h4><p>文件的读写操作的系统调用分别是<code>read</code>和<code>write</code>。</p>
<h5 id="read-函数"><a href="#read-函数" class="headerlink" title="read 函数"></a>read 函数</h5><p>从打开文件中读取数据返回：读到的字节数，若已到文件尾返回 0，若出错为-1。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320095118775.png" alt="image-20220320095118775"></p>
<ul>
<li>其中参数<code>fd</code>表示要进行读操作的文件的描述符；</li>
<li><code>buf</code>是一个指向缓冲区的指针，该缓冲区存放将要读取到中断的数据；</li>
<li><code>count</code>表示本次操作将要读取的数据的字节数。</li>
</ul>
<p>读操作从文件的当前位移量处开始，在成功返回之前，该位移量增加实际读得的字节数</p>
<p>有几种情况可使实际读到的字节数少于要求读的字节数：</p>
<ol>
<li>读普通文件时，在读到要求字节数之前已到达了文件尾端；</li>
<li>从终端设备读时，通常一次最多读一行；</li>
<li>从网络中读；</li>
<li>面向记录的设备。</li>
</ol>
<h5 id="write-函数"><a href="#write-函数" class="headerlink" title="write 函数"></a>write 函数</h5><p><img src="https://oss.chundot.xyz/picgo/image-20220320095155376.png" alt="image-20220320095155376"></p>
<p>打开文件写入数据，若成功则返回写的字节数，若出错为-1。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320095200261.png" alt="image-20220320095200261"></p>
<p>对于普通文件 ，写操作从文件的当前位移量处开始，如果在打开该文件时，指定了 O_APPEND 选择项，则在每次写操作之前，将文件位移量设置在文件的当前结尾处。在一次成功操作写之后，该文件位移量增加实际写的字节数。</p>
<h6 id="案例程序-1"><a href="#案例程序-1" class="headerlink" title="案例程序"></a>案例程序</h6><p><img src="https://oss.chundot.xyz/picgo/image-20220320103210374.png" alt="image-20220320103210374"></p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320103621058.png" alt="image-20220320103621058"></p>
<h6 id="另外的程序"><a href="#另外的程序" class="headerlink" title="另外的程序"></a>另外的程序</h6><p><img src="https://oss.chundot.xyz/picgo/image-20220320105413049.png" alt="image-20220320105413049"></p>
<p>该程序首先打开(或创建)文件<code>/home/hwx/test.txt</code>接着调用 write 函数将缓冲区 1 的数据写入文件，此时写入的数据长度为 10，然后调用 lseek 定位文件，文件偏移量为 50，并从文件开头计算偏移值，最后调用 write 将缓冲区 2 的数据也写入文件，写入的数据长度也为 10。</p>
<p>在第二次写入数据时 之间 40 字节的内容为空 文件的总长度为 60 成功运行程序后 利用 ls 和 od 命令可以检验出：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320105426083.png" alt="image-20220320105426083"></p>
<p>使用 od 命令观察该文件的实际内容。(命令行中的-c 标志表示以字符方式打印文件内容)</p>
<p>中间 40 字节全为 0。</p>
<h3 id="文件的属性操作"><a href="#文件的属性操作" class="headerlink" title="文件的属性操作"></a>文件的属性操作</h3><p>Linux 的文件系统具有比较复杂的属性，包括<strong>文件访问权限</strong>、<strong>文件所有者</strong>、<strong>文件名本身</strong>、<strong>文件长度</strong>等。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101732493.png" alt="image-20220320101732493"></p>
<p>改变文件访问权限：<code>chmod</code>、<code>fchmod</code>这两个函数使用户可以更改现存文件的存取许可权</p>
<p>两个函数的返回：若成功则为 0，出错则为-1。</p>
<p><code>chmod</code>函数在指定的文件上进行操作，pathname 指定了这个文件的绝对路径名或相对路径名，而<code>fchmod</code>函数则对已打开的文件进行操作，<code>fd</code>是这个打开文件的描述符。</p>
<p>为了改变一个文件的访问许可权位 进位的有效用户 ID 必须等于文件的所有者(User)或者该进程必须具有 root 权限。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101745292.png" alt="image-20220320101745292"></p>
<p>当前<code>test.txt</code>文件权限:</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101820792.png" alt="image-20220320101820792"></p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101824816.png" alt="image-20220320101824816"></p>
<p>可见运行程序后文件权限被改变。</p>
<h3 id="文件的其他操作"><a href="#文件的其他操作" class="headerlink" title="文件的其他操作"></a>文件的其他操作</h3><p>Linux 系统中所有文件都有一个与之对应的索引节点，该节点包含了文件的相关信息。</p>
<p>这些信息被保存在 stat 结构体中，可以通过调用下面 3 个 stat 函数来返回文件的信息：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101844194.png" alt="image-20220320101844194"></p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320101854044.png" alt="image-20220320101854044"></p>
<p><strong>stat</strong>函数、<strong>fstat</strong>函数和<strong>lstat</strong>函数。</p>
<p>若成功则返回 0，出错则返回-1。</p>
<ul>
<li><strong>stat</strong>函数返回指定文件的信息结构，参数 pathname 指定了该文件的绝对路径名或相对路径名；</li>
<li><strong>fstat</strong>函数获得已在描述符 fd 上打开的文件的有关信息；</li>
<li><strong>lstat</strong>函数类似于 stat，但是当命名的文件是一个符号链接时，lstat 返回该符号链接的有关信息，而非由该符号链接引用的文件的信息 0。</li>
</ul>
<h2 id="基于流的-I-x2F-O"><a href="#基于流的-I-x2F-O" class="headerlink" title="基于流的 I&#x2F;O"></a>基于流的 I&#x2F;O</h2><h3 id="流和-FILE-对象"><a href="#流和-FILE-对象" class="headerlink" title="流和 FILE 对象"></a>流和 FILE 对象</h3><p>对于标准 I&#x2F;O 库，它们的操作则是围绕流进行的，当用标准 I&#x2F;O 库打开或创建一个文件时，已使一个流与一个文件相结合。I&#x2F;O 函数 fopen 返回一个指向 FILE 对象的指针。该对象通常是一个结构体，包含了 I&#x2F;O 库为管理该流所需要的所有信息，包括实际用于 I&#x2F;O 的文件描述符，指向流缓存的指针，缓存的长度，当前在缓存中的字符数，出错标志等。</p>
<h3 id="大致过程"><a href="#大致过程" class="headerlink" title="大致过程"></a>大致过程</h3><p>对流进行操作的第一步是通过调用<code>fopen</code>函数将其打开，并返回一个 FILE 结构指针。当流成功打开以后就可以调用相应的库函数对其进行 I&#x2F;O 操作。当完成操作后要执行清空缓冲区、保存数据等操作，然后将流关闭，这些工作可通过<code>fclose</code>函数来完成。</p>
<p>当使用流 I&#x2F;O 时，有 3 个流会自动地打开：标准输入、标准输出和标准错误，用文件描述符<code>STDIN_FILENO</code>、<code>STDOUT_FILENO</code>、<code>STDERR_FILENO</code>表示它们，这 3 个符号定义在头文件<code>unistd.h</code>。</p>
<p>而在基于流地 I&#x2F;O 操作中，通过预定义文件指针<code>stdin</code>、<code>stdout</code>和<code>stderr</code>来引用标准输入、标准输出和标准出错。</p>
<h3 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h3><p>基于流地操作最终会调用<code>read</code>或者<code>write</code>函数进行 I&#x2F;O 操作。为了提高程序的运行效率，尽可能减少使用 read 和 write 调用的数量，流对象通常会提供缓冲区,以减少调用系统 I&#x2F;O 库函数的次数，缓存用 3 种类型：</p>
<ol>
<li>全缓存(<code>_IO_FULL_BUF</code>)：直到缓冲区被填满，才调用系统 IO 函数，直到读入的内容的字节数等于缓冲区大小或者文件已经到达结尾，才进行实际的 I&#x2F;O 操作，将外村文件内容读入缓冲区，对于写操作来说，直到缓冲区被填满，才进行实际的 I&#x2F;O 操作；</li>
<li>行缓存(<code>_IO_LINE_BUF</code>)：直到遇到换行符<code>\n</code> 才调用系统 I&#x2F;O 库函数，对于读操作来说，遇到换行符<code>\n</code>才进行 I&#x2F;O 操作，将缓冲区内容写到外存中。由于缓冲区大小是有限的，所以当缓冲区被填满时，即使没有遇到换行符<code>\n</code>，也同样会进行实际的 I&#x2F;O 操作；</li>
<li>无缓存(<code>_IO_UNBUFFERED</code>)：没有缓冲区，数据会立即读入或者输出到外存文件和设备上。标准出错 stderr 是无缓冲的，这样保证错误提示和输出能够即使反馈给用户，供用户排除错误。</li>
</ol>
<h2 id="深入探究-I-x2F-O"><a href="#深入探究-I-x2F-O" class="headerlink" title="深入探究 I&#x2F;O"></a>深入探究 I&#x2F;O</h2><h3 id="原子操作和竞争条件"><a href="#原子操作和竞争条件" class="headerlink" title="原子操作和竞争条件"></a>原子操作和竞争条件</h3><p>所有系统调用都是以原子操作方式执行的，内核保证了某系统调用中的所有步骤会作为独立操作而一次性加以执行，其间不会为其他进程或线程所中断。</p>
<p>原子性规避了竞争状态，竞争状态：操作共享资源的两个进程(或线程)，其结果取决于一个无法预期的顺序，即这些进程获得 CPU 使用权的先后相对顺序。</p>
<h3 id="文件-I-x2F-O-的两种竞争状态"><a href="#文件-I-x2F-O-的两种竞争状态" class="headerlink" title="文件 I&#x2F;O 的两种竞争状态"></a>文件 I&#x2F;O 的两种竞争状态</h3><p>以独占方式创建一个文件, 当同时指定<code>O_EXCL</code>与<code>O_CREAT</code>作为<code>open</code>的标志位时，如果要打开的文件依然存在，则<code>open</code>将返回一个错误。</p>
<p>这提供了一种机制，保证进程是打开文件的创建者。对文件是否存在的检查和创建文件属于同一原子操作。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220320100348242.png" alt="image-20220320100348242"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux笔记 - 进程</title>
    <url>/2022/04/linux-note-process/</url>
    <content><![CDATA[<h2 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h2><p>本文会简单讲述进程创建和进程间通信。</p>
<p>简单说一下，进程是操作系统调度资源的基本单位，比如将可执行程序跑起来就变成了进程。</p>
<p>进程是由数据(全局变量、静态变量、只读变量…)、代码和堆栈(局部变量、动态分配的内存…)组成的。</p>
<p>进程的模式有用户模式、内核模式。</p>
<p>可以输入<code>ps</code>命令来查看正在运行的进程：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-1.png" alt="process-1"></p>
<p><img src="https://oss.chundot.xyz/picgo/process-2.png" alt="process-2"></p>
<p><code>ps -aue</code>命令可以查看更为详细的信息：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-3.png" alt="process-3"></p>
<p><code>top</code>命令可以实时查看正在运行的程序：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-4.png" alt="process-4"></p>
<p>在终端输入<code>top</code>，输入q可以退出：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-5.png" alt="process-5"></p>
<p>Linux系统上可以管理多个进程，进程被分时分片处理。</p>
<p>下面演示在程序中如何创建进程：</p>
<ol>
<li><p><code>system</code>函数可以在命令行中执行命令，可以借此来创建一个进程，不作赘述</p>
<p><img src="https://oss.chundot.xyz/picgo/process-6.png" alt="process-6"></p>
</li>
<li><p><code>fork</code>函数、<code>vfork</code>函数 创建子进程: 当前进程是父进程，被创建进程是子进程，创建完后父子进程通知执行</p>
<p><img src="https://oss.chundot.xyz/picgo/process-7.png" alt="process-7"></p>
</li>
<li><p><code>exec</code>家族</p>
<p><img src="https://oss.chundot.xyz/picgo/process-8.png" alt="process-8"></p>
<p>这些函数都可以创建一个进程，暂且不展开描述。</p>
</li>
</ol>
<p>进程有很多种状态，例如运行时、睡眠、挂起、等待、死亡、僵尸…</p>
<p>下面代码演示：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is parent process,pid: %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Create child process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is parent process: %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is child process: %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行这个程序，程序已经打印出了进程号：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-9.png" alt="process-9"></p>
<p>这里有必要明确一下<code>fork</code>函数的返回值：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-10.png" alt="process-10"></p>
<p>根据fork函数的返回值来看是在子进程中还是父进程中，调用成功的话，父进程中返回值是子进程的ID，子进程中是0。实际上这里fork返回了两次。</p>
<p>fork做了两件事，第一件是复制结构，将父进程的数据结构都复制了一份。</p>
<p>第二件事就是唤醒新进程，让子进程运行起来。</p>
<p>运行如下代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is parent process,pid: %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Create child process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is parent process: %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is child process: %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"n = %d\n"</span><span class="token punctuation">,</span> n <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在代码中定义了一个变量n，初始值为10，子进程的n同样初始为10：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-11.png" alt="process-11"></p>
<p>下面谈谈僵尸进程。</p>
<p>有一种情况，父进程创建了子进程，父进程先于子进程结束，子进程资源没有被释放，就会变成僵尸进程，持续占用系统资源(内核中进程树会保存进程的数据，树中节点会保存进程的一些数据)。</p>
<p>子进程结束前，会向父进程发送SIGCHILD信号，父进程收到信号后，回收子进程资源，然后父进程再结束。父进程可以写一个wait函数，等待子进程发送SIGCHILD信号。</p>
<p><img src="https://oss.chundot.xyz/picgo/process-12.png" alt="process-12"></p>
<p>如下是代码演示：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create child process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"child process: %d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"end parent process\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>使用wait函数就是要等待子进程打印完所有数字，父进程才结束。</p>
<p>最后看看守护进程。</p>
<p>守护进程是一个独立的进程，最常见的用途就是记录其他进程的情况，保存系统日志。</p>
<p>终端输入<code>ps axj</code>可以查看系统中的守护进程：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-13.png" alt="process-13"></p>
<p>TPGID为-1的话，就说明是守护进程。</p>
<p>如果要把一个进程变成守护进程，要先<code>kill</code>其父进程，同时摆脱终端的控制。</p>
<p>要摆脱终端的控制，就要关闭三个文件描述符号：标准输入设备，标准输出设备，标准错误输出设备，然后重定向当前进程IO操作到&#x2F;dev&#x2F;null (黑洞设备)。然后要创建新的会话，摆脱原有会话进程组的控制。</p>
<p>这里要提到进程的组织形式：多个进程组成一个进程组，多个进程组组成一个会话。这里不详细解释会话是什么。</p>
<p>守护进程创建编程模型：</p>
<p>第一种:</p>
<ol>
<li><p>创建新会话 <code>setsid</code>;</p>
</li>
<li><p>改变当前工作目录 <code>chdir</code>;</p>
</li>
<li><p>重设当前文件权限 <code>umask</code>;</p>
</li>
<li><p>关闭文件 <code>fclose</code>.</p>
</li>
</ol>
<p>第二种：</p>
<p>       1. 重设文件权限 <code>umask;</code><br>       2. 创建子进程 <code>fork</code>;<br>       3. 结束父进程;<br>       4. 创建新会话 <code>setsid;</code><br>       5. 防止子进程成为僵尸进程 忽略SIGCHILD SIGUP信号;<br>       6. 改变当前工作目录 <code>chdir</code>;<br>       7. 重定向文件描述符号 <code>open dup(fd,0) dup(fd,1)</code> .</p>
<p>下面演示创建守护进程：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 重设文件权限</span>
    <span class="token function">umask</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建子进程 结束父进程</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"create process failed: %m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"parent process end\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token operator">==</span> ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pid: %d\n"</span><span class="token punctuation">,</span><span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 创建新会话</span>
        <span class="token function">setsid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 防止子进程成为僵尸进程 忽略SIGCHILD、SIGUP信号</span>
        <span class="token function">signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span>SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">signal</span><span class="token punctuation">(</span>SIGHUP<span class="token punctuation">,</span>SIG_IGN<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 改变当前工作目录</span>
        <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 重定向文件描述符号 open、dup函数</span>
        <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"/dev/null"</span><span class="token punctuation">,</span>O_RDWR<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//模拟守护进程工作</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在终端中编译运行：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-14.png" alt="process-14"></p>
<p>现在关闭终端，在命令行输入<code>ps -axj</code>，可以看到运行起来的守护进程还在运行：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-15.png" alt="process-15"></p>
<p>这里要用<code>kill</code>杀掉进程。</p>
<p>接下来谈进程间通信。</p>
<p>顾名思义，要实现不同进程间进行传递信息。</p>
<p>这里可以分为两大类，一个是不同主机上的进程间进行通信(网络通信)，另一个是同一主机上的进程进行通信。</p>
<p>先谈同一主机上进程通信，此时又可以分为两类：父子进程间通信和非父子进程间通信。</p>
<p>上文提到，<code>fork</code>子进程会拷贝父进程的数据，因此父子进程间通信还是比较简单的。</p>
<p>第一种通信方式，较为朴素，使用普通文件，进程A将要传递的信息放入这个文件，进程B再去读这个文件即可。父子进程间可通过文件描述符号，非父子进程之间就只能通过具体文件来通信。</p>
<p>第二种方式，文件映射虚拟内存 <code>mmap</code>。</p>
<p>第三种方式，匿名管道(父子间进程使用)和有名管道(非父子进程间使用)。</p>
<p>除此之外，还有信号、共享内存、消息队列、信号量和网络可用于通信。</p>
<p>本文主要讲前3种。</p>
<p>下面代码简单演示了第一种：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token comment">// 通过文件进行通信</span>
<span class="token comment">// 父进程往文件里写入数据</span>
<span class="token comment">// 子进程读出来并打印</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.dat"</span><span class="token punctuation">,</span>O_CREAT<span class="token punctuation">,</span><span class="token number">0666</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建文件失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建文件成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.dat"</span><span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            n<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> 
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> m<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.dat"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>            
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> %d\n"</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行程序，可以看见子进程将父进程写入文件的数据都打印了出来：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-16.png" alt="process-16"></p>
<p>下面讨论管道。</p>
<p>管道也是FIFO结构，分为两种，匿名管道和有名管道。</p>
<p>父子进程使用匿名管道。</p>
<ol>
<li><p>创建文件描述符号；</p>
</li>
<li><p>将文件描述符号变成管道。</p>
</li>
</ol>
<p><img src="https://oss.chundot.xyz/picgo/process-17.png" alt="process-17"></p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>

<span class="token comment">// 使用匿名管道</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建管道描述符号</span>
    <span class="token keyword">int</span> fd<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">pipe</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建管道失败\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建管道成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 父子进程之间使用管道</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> temp<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>temp<span class="token punctuation">,</span><span class="token number">1023</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                temp<span class="token punctuation">[</span>ret<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">> %s\n"</span><span class="token punctuation">,</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码的功能是父进程接收用户输入后传入管道，子进程从管道读出并显示。</p>
<p><img src="https://oss.chundot.xyz/picgo/process-18.png" alt="process-18"></p>
<p>接着演示有名管道，流程如下：</p>
<table>
<thead>
<tr>
<th>进程A</th>
<th>进程B</th>
</tr>
</thead>
<tbody><tr>
<td>创建管道文件 mkfifo</td>
<td></td>
</tr>
<tr>
<td>打开管道文件</td>
<td>打开管道文件</td>
</tr>
<tr>
<td>往管道文件写入数据</td>
<td>从管道文件读取数据</td>
</tr>
<tr>
<td>关闭管道</td>
<td>关闭管道</td>
</tr>
<tr>
<td>删除管道文件</td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<p><img src="https://oss.chundot.xyz/picgo/process-19.png" alt="process-19"></p>
<p>进程A的代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 创建管道文件</span>
    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">mkfifo</span><span class="token punctuation">(</span><span class="token string">"test.pipe"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建管道文件失败:%m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"创建管道文件成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 打开管道文件</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.pipe"</span><span class="token punctuation">,</span>O_WRONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开管道文件失败:%m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"test.pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开管道文件成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环写入</span>
    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">sprintf</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span><span class="token string">"Hello Linux %d"</span><span class="token punctuation">,</span>n<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>buff<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"test.pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>进程B：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdbool.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// 打开管道文件</span>
    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.pipe"</span><span class="token punctuation">,</span>O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">==</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开管道文件失败:%m\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"test.pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"打开管道文件成功\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 循环读取</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">char</span> buff<span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span>buff<span class="token punctuation">,</span><span class="token number">1023</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            buff<span class="token punctuation">[</span>ret<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">>> %s\n"</span><span class="token punctuation">,</span>buff<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"test.pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果：</p>
<p><img src="https://oss.chundot.xyz/picgo/process-20.png" alt="process-20"></p>
<p><img src="https://oss.chundot.xyz/picgo/process-21.png" alt="process-21"></p>
<p><img src="https://oss.chundot.xyz/picgo/process-22.png" alt="process-22"></p>
<p>这里要注意的是，这个程序不能在共享的文件夹下运行，因为共享文件夹下不能创建管道。同时必须两个进程都打开，这个程序才能返回，否则会阻塞。先关闭读取端，会导致写入端结束而先关写入端，不会对读取端造成影响。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>C</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫实战 - 爬取TIOBE TOP20语言排行榜</title>
    <url>/2022/04/python-spider-tiobe-top/</url>
    <content><![CDATA[<h2 id="Python爬虫实战-爬取TIOBE-TOP20语言排行榜"><a href="#Python爬虫实战-爬取TIOBE-TOP20语言排行榜" class="headerlink" title="Python爬虫实战 - 爬取TIOBE TOP20语言排行榜"></a>Python爬虫实战 - 爬取TIOBE TOP20语言排行榜</h2><p>URL: <a href="https://www.tiobe.com/tiobe-index/">index | TIOBE - The Software Quality Company</a></p>
<p>IDE: PyCharm  Professional</p>
<p>要爬取的是排名前20的语言榜单，并将其存成文本文件和生成词云。</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-1.png" alt="python-spider-1"></p>
<p>这个榜单包括6列，分别是2022年3月的排名(Mar 2022)、2021年3月的排名(Mar 2021)、增减、程序语言(Programming Language)、占比(Ratings)、变化率(Change)。</p>
<h4 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h4><p>导入要用的库：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> re
<span class="token keyword">import</span> wordcloud<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>requests是用来发起https请求，并获取结果的。BeautifulSoup用于解析网页html代码，re用于正则匹配，wordcloud用于生成词云。</p>
<p>检查网页源代码，可以发现整个榜单放id为top20的table标签下：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-2.png" alt="python-spider-2"></p>
<p>榜单的主体在这个table标签的tbody标签下：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-3.png" alt="python-spider-3"></p>
<p>而每一行都被划分在tbody一个tr标签下：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-4.png" alt="python-spider-4"></p>
<p>知道这些就足够了，下面编写代码。</p>
<h4 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">url <span class="token operator">=</span> <span class="token string">"https://www.tiobe.com/tiobe-index/"</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>
table <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"top20"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"tbody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码获取了网页html源码并解析，返回一个soup对象，使用find和find_all函数根据标签查找，获取tr标签下数据组成的列表。</p>
<p>接下来将其打印出来看看：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-5.png" alt="python-spider-5"></p>
<p>打印出了每一个tr标签下的内容，要获取的数据就在其中：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> item <span class="token keyword">in</span> table<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p>那直接取出文本：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-6.png" alt="python-spider-6"></p>
<p>现在拿到的数据就很间接了，程序将单个标签下所有的文本都连接到了一起。</p>
<p>现在已经获取到了数据，接下来要做的是数据处理。</p>
<h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><p>现在获取的仅仅是文本，接下来要对其进行分割。</p>
<p>这时派上用场的是正则表达式。</p>
<p>这里使用re模块中的search函数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> string<span class="token punctuation">,</span> flags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token comment"># 扫描整个字符串并返回第一个成功的匹配。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>pattern</td>
<td>匹配的正则表达式</td>
</tr>
<tr>
<td>string</td>
<td>要匹配的字符串</td>
</tr>
<tr>
<td>flags</td>
<td>标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</td>
</tr>
</tbody></table>
<p>不难发现，在上面爬到的文本中，每一行的第一个数字就是语言的当前排名(1,2,3…)，因此这是固定的，后面紧跟的数字是去年排名，再跟着的若干单词是语言的名字，随后两个百分数就是占比和变化率。</p>
<p>那么每一次循环中，都是对一行的文本中数据的提取。</p>
<p>首先剔除每一行的第一个数字即当前排名，那么到字母之前剩下的数字就是去年排名，可以轻易的写出正则表达式”[0-9]+”，来匹配第一个出现的纯数字。</p>
<p>随后就是语言名字了，直接匹配第一个非数字字符串即可，即”\D+”。</p>
<p>接下来要匹配占比，显然这个百分数后面都会跟着一个正号或负号，因此表达式可以写成</p>
<p>“(\d+.([0-9]<em>?)%+)|(\d+.([0-9]</em>?)%-)”，最后剩下的是变化率，这个百分数之前都。有正负号，所以可以直接写出”-(.<em>?)%|+(.</em>?)%”。最后得到的结果用.group()函数取出即可。</p>
<p>每一行提取出的数据放到一个元组里：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">current_rand <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> table<span class="token punctuation">:</span>
    <span class="token keyword">if</span> current_rand <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
        target <span class="token operator">=</span> item<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        target <span class="token operator">=</span> item<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    previous_rand <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"[0-9]+"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    language <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"(\D)+"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ratings <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"(\d+\.([0-9]*?)%\+)|(\d+\.([0-9]*?)%-)"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    change <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"-(.*?)%|\+(.*?)%"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    current_rand <span class="token operator">=</span> current_rand <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>再循环中将结果打印：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-7.png" alt="python-spider-7"></p>
<p>因为最后的结果要保存，所以要定义一个列表，将元组放到列表中。</p>
<p>考虑到要生成词云，所以同样要定义一个字典，与程序语言名称为key，以占比为值，这里要把百分比的%去掉，然后转化为浮点数：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">words <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
current_rand <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> table<span class="token punctuation">:</span>
    <span class="token keyword">if</span> current_rand <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
        target <span class="token operator">=</span> item<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        target <span class="token operator">=</span> item<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    previous_rand <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"[0-9]+"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    language <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"(\D)+"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ratings <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"(\d+\.([0-9]*?)%\+)|(\d+\.([0-9]*?)%-)"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    change <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"-(.*?)%|\+(.*?)%"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>current_rand<span class="token punctuation">)</span><span class="token punctuation">,</span> previous_rand<span class="token punctuation">,</span> language<span class="token punctuation">,</span> ratings<span class="token punctuation">,</span> change<span class="token punctuation">)</span><span class="token punctuation">)</span>
    words<span class="token punctuation">[</span>language<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ratings<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    current_rand <span class="token operator">=</span> current_rand <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>得到列表后，保存文本文件：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"result.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Mar 2022  	Mar 2021  	Programming Language	Ratings	    Change\n"</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> result<span class="token punctuation">:</span>
    line <span class="token operator">=</span> <span class="token string">"&#123;:&lt;10&#125;\t&#123;:&lt;10&#125;\t&#123;:&lt;20&#125;\t&#123;:&lt;10&#125;\t&#123;:&lt;10&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码中使用了格式化字符串，利用了format函数，利用open函数打开一个文件，指定标志为”w+”，使用write函数向其中写入数据，使用close函数最后关闭文件。</p>
<p>如下是生成词云的代码，width和height指定长宽，background_color制定背景色：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">,</span> background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>
w<span class="token punctuation">.</span>generate_from_frequencies<span class="token punctuation">(</span>words<span class="token punctuation">)</span>
w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"result.png"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>generate_from_frequencies接收一个字典。</p>
<p>最后to_file生成最后的图片文件。</p>
<p>完整代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> re
<span class="token keyword">import</span> wordcloud

url <span class="token operator">=</span> <span class="token string">"https://www.tiobe.com/tiobe-index/"</span>
res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>
soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span><span class="token string">"html.parser"</span><span class="token punctuation">)</span>
table <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"table"</span><span class="token punctuation">,</span> <span class="token builtin">id</span><span class="token operator">=</span><span class="token string">"top20"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"tbody"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"tr"</span><span class="token punctuation">)</span>

words <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
current_rand <span class="token operator">=</span> <span class="token number">1</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> table<span class="token punctuation">:</span>
    <span class="token keyword">if</span> current_rand <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>
        target <span class="token operator">=</span> item<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        target <span class="token operator">=</span> item<span class="token punctuation">.</span>text<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
    previous_rand <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"[0-9]+"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    language <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"(\D)+"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    ratings <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"(\d+\.([0-9]*?)%\+)|(\d+\.([0-9]*?)%-)"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
    change <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"-(.*?)%|\+(.*?)%"</span><span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>
    result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>current_rand<span class="token punctuation">)</span><span class="token punctuation">,</span> previous_rand<span class="token punctuation">,</span> language<span class="token punctuation">,</span> ratings<span class="token punctuation">,</span> change<span class="token punctuation">)</span><span class="token punctuation">)</span>
    words<span class="token punctuation">[</span>language<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>ratings<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"%"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    current_rand <span class="token operator">=</span> current_rand <span class="token operator">+</span> <span class="token number">1</span>

f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"result.txt"</span><span class="token punctuation">,</span> <span class="token string">"w+"</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"Mar 2022  	Mar 2021  	Programming Language	Ratings	    Change\n"</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> item <span class="token keyword">in</span> result<span class="token punctuation">:</span>
    line <span class="token operator">=</span> <span class="token string">"&#123;:&lt;10&#125;\t&#123;:&lt;10&#125;\t&#123;:&lt;20&#125;\t&#123;:&lt;10&#125;\t&#123;:&lt;10&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>line <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>
f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>

w <span class="token operator">=</span> wordcloud<span class="token punctuation">.</span>WordCloud<span class="token punctuation">(</span>width<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span> height<span class="token operator">=</span><span class="token number">700</span><span class="token punctuation">,</span> background_color<span class="token operator">=</span><span class="token string">"white"</span><span class="token punctuation">)</span>
w<span class="token punctuation">.</span>generate_from_frequencies<span class="token punctuation">(</span>words<span class="token punctuation">)</span>
w<span class="token punctuation">.</span>to_file<span class="token punctuation">(</span><span class="token string">"result.png"</span><span class="token punctuation">)</span>

<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>最后生成了如下的文本文件：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-8.png" alt="python-spider-8"></p>
<p>以及词云图片：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-spider-9.png" alt="python-spider-9"></p>
]]></content>
      <categories>
        <category>数据挖掘</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫实战-获取王者荣耀英雄大全</title>
    <url>/2022/04/python-spider-wzry-hero/</url>
    <content><![CDATA[<h2 id="Python爬虫实战-获取王者荣耀英雄大全"><a href="#Python爬虫实战-获取王者荣耀英雄大全" class="headerlink" title="Python爬虫实战-获取王者荣耀英雄大全"></a>Python爬虫实战-获取王者荣耀英雄大全</h2><p>URL: <a href="https://pvp.qq.com/web201605/herolist.shtml">https://pvp.qq.com/web201605/herolist.shtml</a></p>
<h4 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h4><p>访问后页面如下所示:：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-1.png" alt="python-wzry-1"></p>
<p>不难发现，这是静态网页，对于众多英雄的信息，并未使用js渲染，这貌似是个软柿子？</p>
<p>按下F12使用开发者工具，点击Doc，查看请求的Reponse，可以看到众多英雄的信息在这个静态文档列举了出来，于是似乎只要按照html标签就可以轻松获取信息(<em><u>后面会解释，这实际上是个坑，先暂且按照这个思路进行</u></em>)。</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-2.png" alt="python-wzry-2"></p>
<p>拼接li标签下对应的链接(<a href="https://pvp.qq.com/web201605/">https://pvp.qq.com/web201605/</a> + herodetail&#x2F;***.html)，就可以访问到指定英雄对应的链接，如下所示：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-3.png" alt="python-wzry-3"></p>
<p>拼接的URL和访问的页面如下所示：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-4.png" alt="python-wzry-4"></p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-5.png" alt="python-wzry-5"></p>
<p>然后就可以愉快的获取信息了！</p>
<h4 id="初步挖掘"><a href="#初步挖掘" class="headerlink" title="初步挖掘"></a>初步挖掘</h4><p>只须使用如下第三方库：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> re<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<p>之后编写代码的流程也很清晰明了，先通过主页面获取所以英雄的名称及其对应的链接，因为该网页使用了GBK编码，所以要进行转码。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">herolist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
hero_dictionary <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

root_url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/"</span>
herolist_url <span class="token operator">=</span> root_url <span class="token operator">+</span> <span class="token string">"herolist.shtml"</span>
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64)'</span><span class="token punctuation">&#125;</span>


<span class="token keyword">def</span> <span class="token function">get_herolist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>herolist_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span> <span class="token comment"># GBK编码</span>
    targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"herolist clearfix"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">:</span>
        name <span class="token operator">=</span> target<span class="token punctuation">.</span>text
        link <span class="token operator">=</span> root_url <span class="token operator">+</span> target<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> link<span class="token punctuation">)</span>
        herolist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">)</span>

get_herolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果如下：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-6.png" alt="python-wzry-6"></p>
<p>下面访问单个英雄的链接，理清HTML结构后就可以获取数据。</p>
<p>英雄的称号在h3标签中：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-7.png" alt="python-wzry-7"></p>
<p>英雄的属性在class&#x3D;”cover-list”的标签中，每个属性的信息在li标签中，每个属性的值其实就是横条的长度。</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-8.png" alt="python-wzry-8"></p>
<p>这个值可以在li标签下的i标签中找到，只要取出style的值即可，这是一个百分数字符串，取这个字符串中”:”和”%”之间的字符串，得到一个数字，这个数字就可以代表属性值的大小。</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-9.png" alt="python-wzry-9"></p>
<p>英雄的职业虽然没有以文本的形式显示出来，但如下<code>i</code>标签中的class值明显是和职业有关的：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-10.png" alt="python-wzry-10"></p>
<p>只要看看其他的英雄的页面，就可以得到如下对应关系：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-11.png" alt="python-wzry-11"></p>
<p>于是这部分代码就可以这样写：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_heroinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    professions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'herodetail-sort-1'</span><span class="token punctuation">:</span> <span class="token string">'战士'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-2'</span><span class="token punctuation">:</span> <span class="token string">'法师'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-3'</span><span class="token punctuation">:</span> <span class="token string">'坦克'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-4'</span><span class="token punctuation">:</span> <span class="token string">'刺客'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-5'</span><span class="token punctuation">:</span> <span class="token string">'射手'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-6'</span><span class="token punctuation">:</span> <span class="token string">'辅助'</span>
                   <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> herolist<span class="token punctuation">:</span>
        name<span class="token punctuation">,</span>hero_url <span class="token operator">=</span> item
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>hero_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
        title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 英雄称号</span>
        profession <span class="token operator">=</span> professions<span class="token punctuation">[</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"herodetail-sort"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 英雄职业</span>
        targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"cover-list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>
        values <span class="token operator">=</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r":([0-9]+%)"</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">]</span>  <span class="token comment"># 英雄能力值</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> name<span class="token punctuation">,</span> profession<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-12.png" alt="python-wzry-12"></p>
<p>现在来解释这部分代码：</p>
<p>首先定义了一个字典来存放英雄职业对应关系，然后遍历上一段代码获取到的列表，取出每个元素中的链接，进行访问。</p>
<p>对每个链接再做一次请求，获取HTML文档后，借助标签进行数据提取，只要按照上文中说明的流程即可。我这里选择将属性值封装进一个列表。</p>
<p>我还想获得英雄关系，能便于我在选英雄时具有针对性…</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-13.png" alt="python-wzry-13"></p>
<p>观察HTML代码，可以看到3大关系都放在如下3个标签中：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-14.png" alt="python-wzry-14"></p>
<p>一个关系中有两个英雄，分别放在li标签下，而a标签下存放的路径，就指向了这个英雄：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-15.png" alt="python-wzry-15"></p>
<p>那么依据这个链接，就可以得到这个英雄：</p>
<p>这里我选择在最开始获取英雄链接的函数里，加上一个建立字典的操作，这个字典的键就是路径(被分割过)，值是英雄名：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-16.png" alt="python-wzry-16"></p>
<p>建立字典的目的是便于索引，可以直接通过路径拿到英雄名称：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python">relations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment"># 获取英雄关系</span>
targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"hero-list hero-relate-list fl"</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">:</span>
    temp <span class="token operator">=</span> target<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
    hero_one <span class="token operator">=</span> hero_dictionary<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    hero_two <span class="token operator">=</span> hero_dictionary<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
    relations<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hero_one<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>hero_two<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>用一个列表来存放这三个关系。</p>
<p>于是整个代码变成了这个样子：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup


herolist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
hero_dictionary <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
root_url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/"</span>
herolist_url <span class="token operator">=</span> root_url <span class="token operator">+</span> <span class="token string">"herolist.shtml"</span>
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64)'</span><span class="token punctuation">&#125;</span>


<span class="token keyword">def</span> <span class="token function">get_herolist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>herolist_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span><span class="token punctuation">)</span>
    soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
    targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"herolist clearfix"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">:</span>
        name <span class="token operator">=</span> target<span class="token punctuation">.</span>text
        hero_dictionary<span class="token punctuation">[</span>target<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> name  <span class="token comment"># 建立字典</span>
        link <span class="token operator">=</span> root_url <span class="token operator">+</span> target<span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> link<span class="token punctuation">)</span>
        herolist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> link<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_heroinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    professions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'herodetail-sort-1'</span><span class="token punctuation">:</span> <span class="token string">'战士'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-2'</span><span class="token punctuation">:</span> <span class="token string">'法师'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-3'</span><span class="token punctuation">:</span> <span class="token string">'坦克'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-4'</span><span class="token punctuation">:</span> <span class="token string">'刺客'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-5'</span><span class="token punctuation">:</span> <span class="token string">'射手'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-6'</span><span class="token punctuation">:</span> <span class="token string">'辅助'</span>
                   <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> herolist<span class="token punctuation">:</span>
        name<span class="token punctuation">,</span>hero_url <span class="token operator">=</span> item
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>hero_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
        title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 英雄称号</span>
        profession <span class="token operator">=</span> professions<span class="token punctuation">[</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"herodetail-sort"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 英雄职业</span>
        targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"cover-list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>
        values <span class="token operator">=</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r":([0-9]+%)"</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">]</span>  <span class="token comment"># 英雄能力值</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        relations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment"># 关系列表</span>
        <span class="token comment"># 获取英雄关系</span>
        targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"hero-list hero-relate-list fl"</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">:</span>
            temp <span class="token operator">=</span> target<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
            hero_one <span class="token operator">=</span> hero_dictionary<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            hero_two <span class="token operator">=</span> hero_dictionary<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            relations<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hero_one<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>hero_two<span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> name<span class="token punctuation">,</span> profession<span class="token punctuation">,</span> values<span class="token punctuation">,</span> relations<span class="token punctuation">)</span>


get_herolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
get_heroinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行起来可以发现，刚开始很正常，顺利获取了数据：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-17.png" alt="python-wzry-17"></p>
<p>但到后面就报错了，显示<code>KeyError</code>：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-18.png" alt="python-wzry-18"></p>
<p>这是因为字典中没有这个键，这说明了什么？</p>
<p>说明了最开始爬到的诸多英雄，是有缺失的。访问一下这个528.shtml对应的页面：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-19.png" alt="python-wzry-19"></p>
<p>再后头检查一下爬到的英雄，发现真的没有澜…</p>
<p>感觉有点无语，但毕竟已经是个到这一步了，容我冷静地想一想为什么…</p>
<p><img src="http://tva3.sinaimg.cn/large/006ARE9vgy1fwemc30vd5j303y052q2r.jpg" alt="while(true)反复分析(程序员)_While_true_程序员_反复_分析表情"></p>
<h4 id="反思问题"><a href="#反思问题" class="headerlink" title="反思问题"></a>反思问题</h4><p>不难发现，这个链接返回的数据，原本就是缺的：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-21.png" alt="python-wzry-21"></p>
<p>前面的这部分数据，明显找不到。</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-22.png" alt="python-wzry-22"></p>
<p>再看看这让人匪夷所思的URL，搞不好数据还是停留在2016年的…</p>
<p>再看看请求头，发现status code是304并非200，可见发生了网页重定向：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-23.png" alt="python-wzry-23"></p>
<p>就不详细解释304的意思了，直接百度 <a href="https://wenku.baidu.com/view/97ccaaa6d7d8d15abe23482fb4daa58da0111ca5.html">分析HTTP请求返回304状态码 - 百度文库</a>。</p>
<p>遇到这种问题并非没有解决方法，但我就不继续挖坑了，因为我更乐意另辟蹊径。</p>
<p>在XHR中发现了一条请求，返回的是json数据。</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-24.png" alt="python-wzry-24"></p>
<p>不妨看看这是个甚么数据：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

hero_dict <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
hero_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/js/herolist.json"</span>
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64)'</span><span class="token punctuation">&#125;</span>
results <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>看到这个数据，检验了一下，发现是齐全的，不禁觉得惊喜又感动，但又有那么一丝惆怅。</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-25.png" alt="python-wzry-25"></p>
<p>之前以为静态网页就是软柿子了，但现在这个json数据似乎更加简明。所以说，我们不能局限在经验里。</p>
<h4 id="改善代码"><a href="#改善代码" class="headerlink" title="改善代码"></a>改善代码</h4><p>现在只要将第一个获取英雄列表的函数替换：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_herolist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/js/herolist.json"</span>
    results <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>
        name <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">"cname"</span><span class="token punctuation">]</span> <span class="token comment"># 英雄名称</span>
        link <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/herodetail/&#123;&#125;.shtml"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">"ename"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        herolist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span>
        hero_dictionary<span class="token punctuation">[</span><span class="token string">"&#123;&#125;.shtml"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">"ename"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> name<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>在稍微修改一下后面的代码，目前得到的代码是这样的：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> re

herolist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
hero_dictionary <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
root_url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/"</span>
herolist_url <span class="token operator">=</span> root_url <span class="token operator">+</span> <span class="token string">"herolist.shtml"</span>
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64)'</span><span class="token punctuation">&#125;</span>


<span class="token keyword">def</span> <span class="token function">get_herolist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/js/herolist.json"</span>
    results <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>
        name <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">"cname"</span><span class="token punctuation">]</span> <span class="token comment"># 英雄名称</span>
        link <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/herodetail/&#123;&#125;.shtml"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">"ename"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        herolist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span>
        hero_dictionary<span class="token punctuation">[</span><span class="token string">"&#123;&#125;.shtml"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">"ename"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> name


<span class="token keyword">def</span> <span class="token function">get_heroinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    professions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'herodetail-sort-1'</span><span class="token punctuation">:</span> <span class="token string">'战士'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-2'</span><span class="token punctuation">:</span> <span class="token string">'法师'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-3'</span><span class="token punctuation">:</span> <span class="token string">'坦克'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-4'</span><span class="token punctuation">:</span> <span class="token string">'刺客'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-5'</span><span class="token punctuation">:</span> <span class="token string">'射手'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-6'</span><span class="token punctuation">:</span> <span class="token string">'辅助'</span>
                   <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> herolist<span class="token punctuation">:</span>
        name<span class="token punctuation">,</span>hero_url <span class="token operator">=</span> item
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>hero_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
        title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 英雄称号</span>
        profession <span class="token operator">=</span> professions<span class="token punctuation">[</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"herodetail-sort"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 英雄职业</span>
        targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"cover-list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>
        values <span class="token operator">=</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r":([0-9]+%)"</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">]</span>  <span class="token comment"># 英雄能力值</span>
        relations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token comment"># 获取英雄关系</span>
        targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"hero-list hero-relate-list fl"</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">:</span>
            temp <span class="token operator">=</span> target<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
            hero_one <span class="token operator">=</span> hero_dictionary<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            hero_two <span class="token operator">=</span> hero_dictionary<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            relations<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hero_one<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>hero_two<span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> name<span class="token punctuation">,</span> profession<span class="token punctuation">,</span> values<span class="token punctuation">,</span> relations<span class="token punctuation">,</span> hero_url<span class="token punctuation">)</span>


get_herolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
get_heroinfo<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>运行结果如下：</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-26.png" alt="python-wzry-26"></p>
<p>事实上数据还可以进一步扩充，这就看自己的意愿了。</p>
<h4 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h4><p>下面实现将数据保存到excel。</p>
<p>一个Excel文档也称为一个工作簿（workbook），每个工作簿里可以有多个工作表（worksheet），当前打开的工作表又叫活动表。</p>
<p><img src="https://res.pandateacher.com/crawler-l6-8-2019111.png"></p>
<p>每个工作表里有行和列，特定的行与列相交的方格称为单元格（cell）。比如上图第A列和第1行相交的方格可以直接表示为A1单元格。</p>
<p>通过openpyxl.Workbook()函数就可以创建新的工作簿。</p>
<p>创建完新的工作簿后，还得获取工作表。不然程序会无所适从，不知道要把内容写入哪张工作表里。</p>
<p>添加完工作表，就能来操作单元格，往单元格里写入内容。</p>
<p>使用append函数，就可以添加一行。</p>
<p>代码如下：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">save_excel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>active
    sheet<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"sheet1"</span>
    <span class="token comment"># 表头</span>
    head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"英雄称号"</span><span class="token punctuation">,</span> <span class="token string">"英雄名称"</span><span class="token punctuation">,</span> <span class="token string">"英雄职业"</span><span class="token punctuation">,</span> <span class="token string">"生存能力"</span><span class="token punctuation">,</span> <span class="token string">"攻击伤害"</span><span class="token punctuation">,</span> <span class="token string">"技能效果"</span><span class="token punctuation">,</span> <span class="token string">"上手难度"</span><span class="token punctuation">,</span> <span class="token string">"最佳搭档"</span><span class="token punctuation">,</span> <span class="token string">"压制英雄"</span><span class="token punctuation">,</span> <span class="token string">"被压制英雄"</span><span class="token punctuation">,</span> <span class="token string">"链接"</span><span class="token punctuation">]</span>
    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        <span class="token comment"># 将数据整合为一维列表便于添加</span>
        row <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> value <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token keyword">for</span> group <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>group<span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span> <span class="token comment"># 整行添加</span>

    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'result.xlsx'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>如下就是最后的结果了</p>
<p><img src="https://oss.chundot.xyz/picgo/python-wzry-28.png" alt="python-wzry-28"></p>
<p>接着又试着获取了所有装备的信息，就不详细描述了。</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_equiplist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    type_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"攻击"</span><span class="token punctuation">,</span> <span class="token string">"法术"</span><span class="token punctuation">,</span> <span class="token string">"防御"</span><span class="token punctuation">,</span> <span class="token string">"移动"</span><span class="token punctuation">,</span> <span class="token string">"打野"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"游走"</span><span class="token punctuation">]</span>
    url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/js/item.json"</span>
    items <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>
        name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"item_name"</span><span class="token punctuation">]</span>
        item_type <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"item_type"</span><span class="token punctuation">]</span>
        price <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span>
        total_price <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"total_price"</span><span class="token punctuation">]</span>
        attribute <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"des1"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"&lt;p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            ability <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"des2"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"&lt;p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>
            ability <span class="token operator">=</span> <span class="token string">""</span>
        equip_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> type_list<span class="token punctuation">[</span>item_type<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">,</span> total_price<span class="token punctuation">,</span> attribute<span class="token punctuation">,</span> ability<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p><img src="https://oss.chundot.xyz/picgo/python-wzry-29.png" alt="python-wzry-29"></p>
<p>最后的完整代码：</p>
<pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup
<span class="token keyword">import</span> openpyxl
<span class="token keyword">import</span> re

herolist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
hero_dictionary <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
equip_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
result_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
root_url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/"</span>
herolist_url <span class="token operator">=</span> root_url <span class="token operator">+</span> <span class="token string">"herolist.shtml"</span>
headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'user-agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (X11; Linux x86_64)'</span><span class="token punctuation">&#125;</span>


<span class="token keyword">def</span> <span class="token function">get_herolist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/js/herolist.json"</span>
    results <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> result <span class="token keyword">in</span> results<span class="token punctuation">:</span>
        name <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">"cname"</span><span class="token punctuation">]</span> <span class="token comment"># 英雄名称</span>
        link <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/herodetail/&#123;&#125;.shtml"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">"ename"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        herolist<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>link<span class="token punctuation">)</span><span class="token punctuation">)</span>
        hero_dictionary<span class="token punctuation">[</span><span class="token string">"&#123;&#125;.shtml"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">"ename"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> name


<span class="token keyword">def</span> <span class="token function">get_heroinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    professions <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'herodetail-sort-1'</span><span class="token punctuation">:</span> <span class="token string">'战士'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-2'</span><span class="token punctuation">:</span> <span class="token string">'法师'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-3'</span><span class="token punctuation">:</span> <span class="token string">'坦克'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-4'</span><span class="token punctuation">:</span> <span class="token string">'刺客'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-5'</span><span class="token punctuation">:</span> <span class="token string">'射手'</span><span class="token punctuation">,</span>
                   <span class="token string">'herodetail-sort-6'</span><span class="token punctuation">:</span> <span class="token string">'辅助'</span>
                   <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> herolist<span class="token punctuation">:</span>
        name<span class="token punctuation">,</span>hero_url <span class="token operator">=</span> item
        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>hero_url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
        soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"gbk"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span>
        title <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"h3"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text  <span class="token comment"># 英雄称号</span>
        profession <span class="token operator">=</span> professions<span class="token punctuation">[</span>soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"herodetail-sort"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"class"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>  <span class="token comment"># 英雄职业</span>
        targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"cover-list"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"li"</span><span class="token punctuation">)</span>
        values <span class="token operator">=</span> <span class="token punctuation">[</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r":([0-9]+%)"</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"i"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'style'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">]</span>  <span class="token comment"># 英雄能力值</span>
        relations <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token comment"># 获取英雄关系</span>
        targets <span class="token operator">=</span> soup<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span>class_<span class="token operator">=</span><span class="token string">"hero-list hero-relate-list fl"</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> target <span class="token keyword">in</span> targets<span class="token punctuation">:</span>
            temp <span class="token operator">=</span> target<span class="token punctuation">.</span>find_all<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>
            hero_one <span class="token operator">=</span> hero_dictionary<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            hero_two <span class="token operator">=</span> hero_dictionary<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"href"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
            relations<span class="token punctuation">.</span>append<span class="token punctuation">(</span>hero_one<span class="token operator">+</span><span class="token string">"/"</span><span class="token operator">+</span>hero_two<span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> name<span class="token punctuation">,</span> values<span class="token punctuation">,</span> hero_url<span class="token punctuation">)</span>
        result_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>title<span class="token punctuation">,</span> name<span class="token punctuation">,</span> profession<span class="token punctuation">,</span> values<span class="token punctuation">,</span> relations<span class="token punctuation">,</span> hero_url<span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">get_equiplist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    type_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"攻击"</span><span class="token punctuation">,</span> <span class="token string">"法术"</span><span class="token punctuation">,</span> <span class="token string">"防御"</span><span class="token punctuation">,</span> <span class="token string">"移动"</span><span class="token punctuation">,</span> <span class="token string">"打野"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> <span class="token string">"游走"</span><span class="token punctuation">]</span>
    url <span class="token operator">=</span> <span class="token string">"https://pvp.qq.com/web201605/js/item.json"</span>
    items <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>
        name <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"item_name"</span><span class="token punctuation">]</span>
        item_type <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"item_type"</span><span class="token punctuation">]</span>
        price <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"price"</span><span class="token punctuation">]</span>
        total_price <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"total_price"</span><span class="token punctuation">]</span>
        attribute <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"des1"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"&lt;p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            ability <span class="token operator">=</span> item<span class="token punctuation">[</span><span class="token string">"des2"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"&lt;p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&lt;br>"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>
            ability <span class="token operator">=</span> <span class="token string">""</span>
        equip_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>name<span class="token punctuation">,</span> type_list<span class="token punctuation">[</span>item_type<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> price<span class="token punctuation">,</span> total_price<span class="token punctuation">,</span> attribute<span class="token punctuation">,</span> ability<span class="token punctuation">]</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">save_excel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    wb <span class="token operator">=</span> openpyxl<span class="token punctuation">.</span>Workbook<span class="token punctuation">(</span><span class="token punctuation">)</span>
    sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>active
    sheet<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">"英雄大全"</span>
    head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"英雄称号"</span><span class="token punctuation">,</span> <span class="token string">"英雄名称"</span><span class="token punctuation">,</span> <span class="token string">"英雄职业"</span><span class="token punctuation">,</span> <span class="token string">"生存能力"</span><span class="token punctuation">,</span> <span class="token string">"攻击伤害"</span><span class="token punctuation">,</span> <span class="token string">"技能效果"</span><span class="token punctuation">,</span> <span class="token string">"上手难度"</span><span class="token punctuation">,</span> <span class="token string">"最佳搭档"</span><span class="token punctuation">,</span> <span class="token string">"压制英雄"</span><span class="token punctuation">,</span> <span class="token string">"被压制英雄"</span><span class="token punctuation">,</span> <span class="token string">"链接"</span><span class="token punctuation">]</span>
    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> result_list<span class="token punctuation">:</span>
        row <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> value <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        <span class="token keyword">for</span> group <span class="token keyword">in</span> item<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>group<span class="token punctuation">)</span>
        row<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>

    sheet <span class="token operator">=</span> wb<span class="token punctuation">.</span>create_sheet<span class="token punctuation">(</span><span class="token string">"装备大全"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"装备名称"</span><span class="token punctuation">,</span> <span class="token string">"装备类型"</span><span class="token punctuation">,</span> <span class="token string">"售价"</span><span class="token punctuation">,</span> <span class="token string">"总价"</span><span class="token punctuation">,</span> <span class="token string">"属性"</span><span class="token punctuation">,</span> <span class="token string">"技能"</span><span class="token punctuation">]</span>
    sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>head<span class="token punctuation">)</span>
    <span class="token keyword">for</span> item <span class="token keyword">in</span> equip_list<span class="token punctuation">:</span>
        sheet<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>

    wb<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token string">'result.xlsx'</span><span class="token punctuation">)</span>
    wb<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    get_herolist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    get_heroinfo<span class="token punctuation">(</span><span class="token punctuation">)</span>
    get_equiplist<span class="token punctuation">(</span><span class="token punctuation">)</span>
    save_excel<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

]]></content>
      <categories>
        <category>数据挖掘</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Visual Studio Code入门操作指北</title>
    <url>/2022/03/try-vscode/</url>
    <content><![CDATA[<h1 id="Visual-Studio-Code-入门指北"><a href="#Visual-Studio-Code-入门指北" class="headerlink" title="Visual Studio Code 入门指北"></a>Visual Studio Code 入门指北</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://code.visualstudio.com/">vscode 的官方地址。</a></p>
<p>vscode 是由微软团队推出的一款<strong>开源</strong>的<strong>代码编辑器</strong>，有丰富的<strong>扩展</strong>。</p>
<hr>
<h2 id="为什么使用-vs-code"><a href="#为什么使用-vs-code" class="headerlink" title="为什么使用 vs code?"></a>为什么使用 vs code?</h2><p>扩展支持<strong>C&#x2F;Cpp</strong>的开发：</p>
<p><img src="https://oss.chundot.xyz/picgo/8cWuBzF4XeAjdE2.gif"></p>
<p>同时<a href="https://docs.emmet.io/cheat-sheet/">vs code 内置 Emmet 支持</a>，前端是再合适不过了：</p>
<p><img src="https://oss.chundot.xyz/picgo/3R1HVIyfDLmTbdg.gif"></p>
<p><img src="https://oss.chundot.xyz/picgo/TedcPw8KplHf2IY.gif" alt="vscode-emmet-css"></p>
<p>除此之外，<strong>丰富的扩展</strong>还能支持其他语言的开发：</p>
<p><img src="https://oss.chundot.xyz/picgo/lUJINBQbGVD87c4.gif" alt="vscode-go-hw"></p>
<p><img src="https://oss.chundot.xyz/picgo/WIliEaTm82ZBFGN.gif" alt="vscode-rust-hw"></p>
<p><strong>重构</strong>功能（快捷键<code>F2</code>）：</p>
<p><img src="https://oss.chundot.xyz/picgo/u7QD2qsrLR3YUeb.gif" alt="vscode-cs-refractor"></p>
<hr>
<h2 id="下载及安装"><a href="#下载及安装" class="headerlink" title="下载及安装"></a>下载及安装</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p><a href="https://code.visualstudio.com/">官方下载地址。</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载完成后，双击运行开始安装：</p>
<ol>
<li>选择同意此协议，下一步；</li>
<li>选择你希望安装的目录，下一步；</li>
<li>可以更改你希望的开始菜单名或禁止创建开始菜单，下一步；</li>
<li>各个选项按你自己需要选择，<strong>通常情况下默认即可</strong>，下一步；</li>
<li>开始安装，等待完成即可。</li>
</ol>
<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="安装中文"><a href="#安装中文" class="headerlink" title="安装中文"></a>安装中文</h3><p>第一次运行 vscode 时，右下角通知有提醒，可以直接<strong>安装并重启</strong>，界面就变成中文了。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20211025203252544.png" alt="image-20211025203252544"></p>
<p>或者你可以点选左侧工具栏的<strong>扩展(最下面)图标</strong>，搜索框输入 Chinese，安装安装次数最高的那个语言插件并重启。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20211025203716083.png" alt="image-20211025203716083"></p>
<h3 id="创建第一个项目"><a href="#创建第一个项目" class="headerlink" title="创建第一个项目"></a>创建第一个项目</h3><p>你可以随意的选择一个你希望保存你所有代码的目录，创建一个新的文件夹，在 vscode 中单击<strong>文件</strong>–<strong>打开文件夹</strong>选择新创建的文件夹并打开。</p>
<p>然后选择<strong>是，我信任此作者</strong>即可。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20211025204559387.png" alt="image-20211025204559387"></p>
<h3 id="项目内创建文件夹或文件"><a href="#项目内创建文件夹或文件" class="headerlink" title="项目内创建文件夹或文件"></a>项目内创建文件夹或文件</h3><p>点选左侧工具栏的<strong>资源管理器</strong>选项卡，或按下默认的快捷键：<code>Ctrl + Shift + E</code>。</p>
<p>红框四个图标代表新建文件、新建文件夹、刷新资源管理器，折叠文件夹(文件夹内容较多时有用)。</p>
<p>你也可以右击<strong>蓝线</strong>内区域进行操作。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20211025211048557.png" alt="image-20211025211048557"></p>
<p>我们可以先新建一个<code>index.html</code>。</p>
<p><img src="https://oss.chundot.xyz/picgo/vscode-new-file.gif" alt="vscode-new-file"></p>
<h3 id="编辑代码"><a href="#编辑代码" class="headerlink" title="编辑代码"></a>编辑代码</h3><p>你可以单击或双击<strong>资源管理器的文件</strong>使其显示在编辑器中。点选我们刚创建的<code>index.html</code>(可能已经打开了)，在右侧即可开始编写代码。</p>
<p>对于 HTML 和 CSS，vscode 内置了<a href="https://emmet.io/">emmet</a>，非常高效的前端<strong>代码片段</strong>合集。<strong>我们之后将会更加详细讲解这部分功能</strong>。</p>
<p><a href="https://docs.emmet.io/cheat-sheet/">在这里查阅 emmet 的奇技淫巧！</a></p>
<p><img src="https://oss.chundot.xyz/picgo/vscode-emmet.gif" alt="vscode-emmet"></p>
<p>当然，其他的语言也会有高效的代码片段，你也可以在<strong>扩展</strong>中找到各式各样的代码片段包！</p>
<h3 id="通用插件"><a href="#通用插件" class="headerlink" title="通用插件"></a>通用插件</h3><p>这里主要介绍基本都会用到的插件。</p>
<h4 id="One-Dark-Pro"><a href="#One-Dark-Pro" class="headerlink" title="One Dark Pro"></a>One Dark Pro</h4><p><img src="https://oss.chundot.xyz/picgo/image-20211026153717317.png" alt="image-20211026153717317"></p>
<p>个人比较喜欢的编辑器配色插件。有三种方案可选。</p>
<p>当然，vscode 有好几种自带的配色方案，如果你觉得自带够用，你完全可以不安装这个插件！</p>
<p><img src="https://cdn.jsdelivr.net/gh/binaryify/onedark-pro/screenshots/normal.png"></p>
<h4 id="vscode-icons"><a href="#vscode-icons" class="headerlink" title="vscode-icons"></a>vscode-icons</h4><p><img src="https://oss.chundot.xyz/picgo/image-20211026153649933.png" alt="image-20211026153649933"></p>
<p>非常棒的图标库，为 vscode 添加及更新了许多文件和文件夹的图标（文件根据后缀名，文件夹根据名称自动更改图标）。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20211026153545952.png" alt="image-20211026153545952"></p>
<hr>
<h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="编辑或查找快捷键"><a href="#编辑或查找快捷键" class="headerlink" title="编辑或查找快捷键"></a>编辑或查找快捷键</h3><p>想要编辑快捷键或查看相关命令，你可以按下<code>Ctrl + K</code>再按下<code>Ctrl + S</code>。</p>
<p>比如，我想找与括号相关的快捷键，我可以输入 bracket 模糊搜索：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20211025205452863.png" alt="image-20211025205452863"></p>
<p>就找到了！有些操作按键默认留空，你可以为其分配你自己喜欢的快捷键。</p>
<hr>
<h3 id="常用快捷键介绍"><a href="#常用快捷键介绍" class="headerlink" title="常用快捷键介绍"></a>常用快捷键介绍</h3><p>下面介绍一些比较常用的快捷键。</p>
<h4 id="编辑器操作"><a href="#编辑器操作" class="headerlink" title="编辑器操作"></a>编辑器操作</h4><h5 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h5><p><code>Ctrl + s</code></p>
<p>你懂的。当然你也可以在下面提到的<strong>设置</strong>中配置<strong>自动保存</strong>。</p>
<h5 id="代码提示"><a href="#代码提示" class="headerlink" title="代码提示"></a>代码提示</h5><p><code>Ctrl + i</code></p>
<p>有时候 vscode 的代码建议不会自动跳出。</p>
<p>每当你看不到代码提示感到心慌的时候，就按一下。</p>
<p><img src="https://oss.chundot.xyz/picgo/vscode-suggest.gif" alt="vscode-suggest"></p>
<h5 id="移动行"><a href="#移动行" class="headerlink" title="移动行"></a>移动行</h5><p><code>Alt + ↑</code>将代码向上移动一行。</p>
<p><code>Alt + ↓</code>将代码向下移动一行。</p>
<h5 id="复制行"><a href="#复制行" class="headerlink" title="复制行"></a>复制行</h5><p><code>Shift + Alt + ↑</code>或<code>Shift + Alt + ↓</code>，方向键决定向上或向下。</p>
<p><img src="https://oss.chundot.xyz/picgo/vscode-copy-by-line.gif" alt="vscode-copy-by-line"></p>
<h5 id="复制光标"><a href="#复制光标" class="headerlink" title="复制光标"></a>复制光标</h5><p><code>Ctrl + Alt + ↑</code>或<code>Ctrl + Alt + ↓</code>，方向键决定向上或向下。</p>
<p>要同时对多行进行编辑的时候比较实用。</p>
<p><img src="https://oss.chundot.xyz/picgo/vscode-multi-cursor-.gif" alt="vscode-multi-cursor-"></p>
<h4 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h4><h5 id="显示命令面板"><a href="#显示命令面板" class="headerlink" title="显示命令面板"></a>显示命令面板</h5><p><code>Ctrl + Shift + p</code></p>
<p>主题更改，扩展管理，编辑操作，文件格式化……所有命令操作都可以在这里执行。</p>
<p><img src="https://oss.chundot.xyz/picgo/vscode-command.gif" alt="vscode-command"></p>
<hr>
<h2 id="常用设置编辑"><a href="#常用设置编辑" class="headerlink" title="常用设置编辑"></a>常用设置编辑</h2><p>你可以点选左侧工具栏最下方的设置图标找到<strong>设置</strong>选项。</p>
<p>你可以使用快捷键<code>Ctrl + ,</code>打开 vscode 的设置选项。</p>
<h3 id="XX-时格式化"><a href="#XX-时格式化" class="headerlink" title="XX 时格式化"></a>XX 时格式化</h3><p>搜索框搜索<strong>Format On</strong>：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20211025212005574.png" alt="image-20211025212005574"></p>
<p>比较推荐勾选<strong>Format On Save</strong>，保存时自动使用文件默认的格式化程序。</p>
<h3 id="自动保存"><a href="#自动保存" class="headerlink" title="自动保存"></a>自动保存</h3><p>搜索框搜索<strong>Auto Save</strong>：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20211027193202773.png" alt="image-20211027193202773"></p>
<p>将光标移到选项上下方会有相应的说明，选择你喜欢的就行。</p>
<p>一般不太推荐开启，经常<code>Ctrl + s</code>也没有多麻烦。</p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>vscode</tag>
        <tag>ide</tag>
      </tags>
  </entry>
  <entry>
    <title>从汇编角度看C语言 - 1</title>
    <url>/2022/03/c-from-asm-1/</url>
    <content><![CDATA[<h1 id="从汇编角度看C语言-1"><a href="#从汇编角度看C语言-1" class="headerlink" title="从汇编角度看C语言 - 1"></a>从汇编角度看C语言 - 1</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><blockquote>
<p>参考书目: 《加密与解密》</p>
</blockquote>
<ul>
<li>系统平台: Windows 10；</li>
<li>调试工具: OllyDBG (吾爱破解专版) ；</li>
<li>开发工具: Visual Studio 2008  Debug模式；</li>
<li>基础要求: 了解C语言和汇编语言；</li>
<li>大致内容: 简述了一些汇编语言与C语言的关系，方便初学者更好的认识程序的底层运行机制。</li>
</ul>
<h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>用VS2008编译如下代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p> 将生成的<strong>可执行文件</strong>拖入<strong>OllyDBG</strong>。</p>
<h2 id="如何寻找C程序入口？"><a href="#如何寻找C程序入口？" class="headerlink" title="如何寻找C程序入口？"></a>如何寻找C程序入口？</h2><p>明确两点：</p>
<ol>
<li>mainCRTStartup和wmainCRTStartup是控制台环境下多字节编码和Unicode编码的启动函数；</li>
<li>WinMainCRTStartup和wWinMainCRTStartup是windows环境下多字节编码和Unicode编码的启动函数。</li>
</ol>
<p>mainCRTStartup做了哪些事？</p>
<p>如何通过mainCRTStartup来找到main函数入口？</p>
<p>以上述程序为例，寻找其<code>main</code>函数入口。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327214647589.png" alt="image-20220327214647589"></p>
<p>初步调试文件，可以发现许多<code>jmp</code>指令，这是编译器生成的启动代码，往下按F8跟随跳转。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327214714185.png" alt="image-20220327214714185"></p>
<p>连续按<code>F8</code>来到<code>call tmainCRTStartuptringtionFilter</code>再一次按<code>F8</code>后，整个程序就会返回，因此按<code>F7</code>单步进入该函数。</p>
<p>接下来连续按下<code>F8</code>，并且观察控制台输出：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327214738686.png" alt="image-20220327214738686"></p>
<p>发现再<code>call hello.00241140</code>后控制台打出Hello World，因此在此处设下断点。</p>
<p>按下<code>Ctrl+F2</code>后重新启动程序，按下<code>F9</code>运行到该断点，按下<code>F7</code>单步进入。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327214803763.png" alt="image-20220327214803763"></p>
<p>按几次F8后看到如上界面，可以看到Hello World字符串，程序的开头即初始化栈帧操作，显然已经成功来到了main函数中。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327214826902.png" alt="image-20220327214826902"></p>
<p>查看如上高亮的指令，该指令将“Hello World”字符串的首地址压入栈中，而后调用printf，将字符串打印在控制台上。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327215012755.png" alt="image-20220327215012755"></p>
<p>事实也正是如此！</p>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>C语言程序是由具有不同功能的函数组成的，因此在逆向分析中应将重点放在函数的识别及参数的传递上，这样做可以将注意力集中在某一段代码上。</p>
<h3 id="函数的识别"><a href="#函数的识别" class="headerlink" title="函数的识别"></a>函数的识别</h3><p>下面讨论<strong>函数的识别</strong>：</p>
<p>调用函数的代码保存了一个返回地址，该地址会与参数一起传递给被调用的函数。绝大多数情况下编译器都使用call和ret指令来调用函数和返回调用位置。</p>
<p>call指令与跳转指令功能类似，但call指令保存返回信息，这里的返回信息实际上主要就是返回地址。</p>
<p>call指令执行时会将其之后的指令地址压入栈的顶部，当遇到ret指令时返回这个地址。</p>
<p>也就是说，call指令给出的地址就是被调用函数的起始地址，ret指令用于结束函数的执行。</p>
<p>因此可以通过定位call指令或ret指令来识别函数，call的操作数就是所调用函数的首地址。</p>
<p>话不多说，看一个例子。</p>
<p>用vs2008编译如下代码，使用OllyDBG进行调试：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>



<p>进入OD后，依然要越过启动代码，寻找真正的<code>main</code>函数。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220701475.png" alt="image-20220327220701475"></p>
<p>连续按F8。</p>
<p>按照以往的经验，调用<code>main</code>函数至少在调用<code>GetCommandLine</code>函数之后。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220724315.png" alt="image-20220327220724315"></p>
<p>于是这里继续往下执行。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220810610.png" alt="image-20220327220810610"></p>
<p>看到这里可以push了3个参数，发现argv和argc的字样，那么下一个call十有八九会到达<code>main</code>函数了。</p>
<p>按F7单步进入。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220839595.png" alt="image-20220327220839595"></p>
<p>来到这里就已经很明显了，可以明显的看到下图中由<code>mov ..., 0x5</code>和<code>mov ..., 0x6</code>两个语句，这明显是在给变量赋值上5和6，那么就可以推测<code>call test.00DD135C</code>实际上在调用<code>add</code>函数，将光标移动指令处，按回车键。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220903701.png" alt="image-20220327220903701"></p>
<p>如下图可以看到<code>add</code>字样，因此猜想是对的。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220934315.png" alt="image-20220327220934315"></p>
<p>那么回到之前的<code>main</code>函数，可以看到代码将0x5和0x6放入rax和ecx寄存器后，又对其进行了压栈操作，实际等价于<code>push 0x5</code>和<code>push 0x6</code>。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327221004603.png" alt="image-20220327221004603"></p>
<p>push操作就是x86架构下典型的压栈方式，符合**__cdecl**调用约定(C&#x2F;C++程序的默认调用约定，在此不作赘述)，在该约定下，可以看到压栈顺序是逆序的，右边的参数先进栈，左边的参数后进栈，栈顶指针esp指向栈中第1个可用的数据项。</p>
<p>在调用函数时，调用者依次将参数压入栈，然后调用函数。函数被调用以后，在栈中取得数据并进行计算，函数计算结束后，由调用者或者函数本身修改栈，使栈恢复原样(平衡栈数据)。</p>
<p>现在将程序运行到call指令之前，查看OD的栈区数据，可以看到显示Arg1&#x3D;5，Arg2&#x3D;6，显然这两个参数已经被压栈。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327221037201.png" alt="image-20220327221037201"></p>
<p>进入add函数后，可以看到程序将arg1存入eax寄存器，再和arg2相加，就完成了计算。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327221100245.png" alt="image-20220327221100245"></p>
<p>另外还有几种调用约定，如<strong>fastcall</strong>和<strong>stdcall</strong>。</p>
<h3 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h3><p>再来讨论<strong>函数的返回值</strong>：</p>
<p>将<code>add</code>函数修改一下，如下所示：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> temp<span class="token punctuation">;</span>
	temp <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
	<span class="token keyword">return</span> temp<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>进入OD，再次回到add函数中。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327221142426.png" alt="image-20220327221142426"></p>
<p><code>mov eax, [local.2]</code>是将计算的最后结果就保存在eax寄存器中，eax就作为存放返回值的寄存器。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327221206970.png" alt="image-20220327221206970"></p>
<p>众所周知，带回返回值的方法不只<code>return</code>，还可传引用，查看如下代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">void</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span> a<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">*</span> b<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>a <span class="token operator">&lt;</span> <span class="token operator">*</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span><span class="token operator">*</span> argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span>b <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token function">max</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"max: %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里定义了一个<code>max</code>函数，接收<code>a</code>和<code>b</code>的地址，将其中较大数放入变量<code>a</code>中。使用OD，进入<code>main</code>函数。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220253195.png" alt="image-20220327220253195"></p>
<p>进入<code>max</code>函数，<code>mov eax, [arg.1]</code>和<code>mov ecx, [arg.2]</code>是将参数<code>a</code>和<code>b</code>的值加载到两个寄存器。</p>
<p>可以看到<code>cmp</code>指令，这是一个用于比较大小的指令，紧跟着的是条件跳转指令，表示如果a&lt;b则不跳转，继续往下执行，这里不多说。</p>
<p>直接看到<code>mov dword ptr ds:[eax], edx</code>。<code>dword ptr</code>是指明数据宽度，而这一步操作就是将结果填入变量a所在的内存地址处。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220315921.png" alt="image-20220327220315921"></p>
<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>现在来谈谈局部变量。</p>
<p><strong>局部变量</strong>是函数内部定义的一个变量，其作用域和生命周期局限于所在函数内。从汇编角度看，局部变量分配空间时通常会使用栈和寄存器。</p>
<p>编译如下代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> z<span class="token punctuation">;</span>
	z <span class="token operator">=</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>
	<span class="token keyword">return</span> z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>
	<span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>进入<code>add</code>函数，<code>sub esp,0xcc</code>即下降栈顶0xcc个字节，实际上是为局部变量开辟空间，同时也在预防栈溢出攻击(一种攻击手法，此处不作赘述)。</p>
<p>这里开辟后的空间一部分是用来存放变量z的。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220210074.png" alt="image-20220327220210074"></p>
<p><code>call</code>调用完后，会出现<code>add esp,0x8</code>这步操作实际上是在平衡栈，可以理解为“回收现场”。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220111908.png" alt="image-20220327220111908"></p>
<p>局部变量的起始值是随机的，是其他函数执行后留在栈中的垃圾数据，因此须要对其进行初始化。</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>而<strong>全局变量</strong>作用于整个程序，它一直存在，放在全局变量的<strong>内存区</strong>中。</p>
<p>局部变量则存在于函数的<strong>栈区</strong>中，函数<strong>调用结束后便会消失</strong>。</p>
<p>在大多数程序中，<strong>常数</strong>一般放在全局变量中。</p>
<p>全局变量通常位于数据区块(.data)的一个固定地址处，当程序要访问全局变量时，一般会用一个固定的硬编码地址直接对内存进行寻址。</p>
<p>如下是示例程序，<code>z</code>是一个全局变量：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> z<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token operator">+</span>z<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>
	z<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span>
	<span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>这里是对z赋值，直接用<code>mov</code>将7写入一个固定的内存地址。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220033227.png" alt="image-20220327220033227"></p>
<p>在<code>add</code>函数中，同样直接从固定的地址中取出<code>z</code>的值到eax寄存器中。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327220014288.png" alt="image-20220327220014288"></p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>最后看看<strong>数组</strong>：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token keyword">static</span> <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0x11</span><span class="token punctuation">,</span><span class="token number">0x22</span><span class="token punctuation">,</span><span class="token number">0x33</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
	<span class="token keyword">int</span> i<span class="token punctuation">,</span>s<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		s<span class="token operator">=</span>s<span class="token operator">+</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
		b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
		<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>一般对数组的访问是通过基址加变址寻址实现的。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220327215920733.png" alt="image-20220327215920733"></p>
<p>在内存中数组可存在于栈、数据段及动态内存中，本例中<code>a[]</code>数组就保存在数据段.data中，其寻址用“基址+偏移量”实现。</p>
<p><code>b[]</code>数组放在栈中，这些栈在编译时分配。数组在声明时可以直接计算偏移地址，针对数组成员寻址时是采用实际的偏移量完成的。</p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>汇编</tag>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>写C语言的种种工具</title>
    <url>/2022/03/tools-to-write-c/</url>
    <content><![CDATA[<h1 id="写-C-语言的种种工具"><a href="#写-C-语言的种种工具" class="headerlink" title="写 C 语言的种种工具"></a>写 C 语言的种种工具</h1><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>本文记录了千奇百怪的 C&#x2F;C++编辑器，对各种编辑器做一个简单的评价，避免让大家走弯路踩坑。</p>
<p>文章的本意是想让大家多花些时间在代码上，而不是环境配置上。</p>
<p>希望能够通过本文提升大家在机房打代码的体验。</p>
<hr>
<h2 id="Dev-C"><a href="#Dev-C" class="headerlink" title="Dev C++"></a>Dev C++</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>比较<strong>轻量</strong>的 C&#x2F;C++的<strong>开源免费</strong>IDE。</p>
<p><a href="https://sourceforge.net/projects/orwelldevcpp/">你可以在 SourceForge 上下载安装包(Setup)或者便携程序(Portable)。</a></p>
<p><strong>机房的版本是 5.11</strong>，也是原团队最后更新的版本（2015 年）。</p>
<p><strong>零配置</strong>就可以编译运行 C&#x2F;C++代码。</p>
<p><strong>机考</strong>比较理想的选择，个人开发不算特别推荐，有更好的选择。</p>
<h3 id="使用技巧"><a href="#使用技巧" class="headerlink" title="使用技巧"></a>使用技巧</h3><h4 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h4><p>点击<strong>文件</strong> -&gt; <strong>新建</strong> -&gt; <strong>源代码</strong>即可直接开始打代码。</p>
<p><img src="https://oss.chundot.xyz/picgo/bYGImLQAe6NnvB9.png" alt="image-20220309220255982"></p>
<p>点击<strong>编译并运行</strong>按钮(默认快捷键为<code>F11</code>)即可运行你的 C&#x2F;C++代码。</p>
<p><img src="https://oss.chundot.xyz/picgo/OyXFgwLKNa3uRWY.png" alt="image-20220309220436198"></p>
<h4 id="中文设置"><a href="#中文设置" class="headerlink" title="中文设置"></a>中文设置</h4><p>主界面工具栏 <strong>Tools</strong> -&gt; <strong>Environment Options</strong> (或者键盘依次按下 Alt, t, v)。</p>
<p><img src="https://oss.chundot.xyz/picgo/iWhrt48meZqUJPF.png" alt="image-20220308155922714"></p>
<p>直接在新窗口<strong>General</strong>一栏<strong>Language</strong>一栏选择<strong>简体中文</strong>即可。</p>
<p><img src="https://oss.chundot.xyz/picgo/VbXLmk2Ox9dScW3.png" alt="image-20220308160536079"></p>
<p>如果你是<strong>新安装</strong>的，就很简单了，开启界面就会询问语言：</p>
<p><img src="https://oss.chundot.xyz/picgo/aZTwu1gLAJKOe6S.png" alt="image-20220308154537126"></p>
<h4 id="格式化代码"><a href="#格式化代码" class="headerlink" title="格式化代码"></a>格式化代码</h4><p>默认快捷键<code>Ctrl + Shift + A</code>，能让你的代码非常<strong>整洁</strong>。</p>
<p><img src="https://oss.chundot.xyz/picgo/Md9EaDczrFWtxhU.gif" alt="dev-cpp-format"></p>
<h4 id="代码补全"><a href="#代码补全" class="headerlink" title="代码补全"></a>代码补全</h4><p>默认快捷键是<code>Ctrl + Space</code>，和<strong>切换输入法的快捷键冲突无法使用</strong>，需要在<strong>工具</strong> -&gt; <strong>快捷键选项</strong>中设置其他快捷键后使用。</p>
<p>不像其他 IDE 的<strong>自动提示</strong>，Dev C++需要<strong>先按下快捷键</strong>才能出现提示。</p>
<p><img src="https://oss.chundot.xyz/picgo/HmnCUGIAvLfJKz1.gif" alt="dev-cpp-completion"></p>
<p>除此之外，**C++**也有补全（包括 STL）。</p>
<h3 id="优缺点总结"><a href="#优缺点总结" class="headerlink" title="优缺点总结"></a>优缺点总结</h3><ul>
<li>开源免费，但已被原团队抛弃（2015 年后没有更新）；</li>
<li>有很多其他团队维护的分支版本，有兴趣的可以在网上搜索；</li>
<li><strong>机房</strong>比较合适的选择。</li>
</ul>
<hr>
<h2 id="Code-Blocks"><a href="#Code-Blocks" class="headerlink" title="Code::Blocks"></a>Code::Blocks</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p><a href="http://www.codeblocks.org/downloads/binaries/">你可以在 Code::Blocks 官网下载安装程序。</a></p>
<p><strong>机房</strong>版本为 16.01。</p>
<p>下载时选择带<strong>mingw</strong>的版本可<strong>零配置</strong>编译运行 C&#x2F;C++代码。</p>
<p>补全能力非常有限。</p>
<p>另外支持格式化。</p>
<p><strong>上机考比较理想的选择</strong>，<strong>个人用也不错</strong>。</p>
<p>适用于<strong>Windows</strong>，<strong>Linux</strong>及<strong>Mac</strong>。</p>
<h3 id="使用方法和技巧"><a href="#使用方法和技巧" class="headerlink" title="使用方法和技巧"></a>使用方法和技巧</h3><p>以下演示均为 16.01 版本（即机房的版本）。</p>
<h4 id="快速开始-1"><a href="#快速开始-1" class="headerlink" title="快速开始"></a>快速开始</h4><p>点击工具栏的中的<strong>File</strong> -&gt; <strong>New</strong> -&gt; <strong>File…</strong></p>
<p><img src="https://oss.chundot.xyz/picgo/7Hj84ignasekXy2.png" alt="image-20220308225001977"></p>
<p>弹出的窗口中选择<strong>C&#x2F;C++<strong>然后点击</strong>Go</strong>；</p>
<p><img src="https://oss.chundot.xyz/picgo/hAaxqHEBoZJrYeg.png" alt="image-20220309203617508"></p>
<p><img src="https://oss.chundot.xyz/picgo/bToElJW8qcFCBVn.png" alt="image-20220309203903355"></p>
<p><img src="https://oss.chundot.xyz/picgo/y6IwrJAGpq4uSFj.png" alt="image-20220309204103773"></p>
<p><img src="https://oss.chundot.xyz/picgo/2ra5ycmElG4OLwo.png" alt="image-20220309204314041"></p>
<p>点击<strong>Build and Run</strong>(默认快捷键为<code>F9</code>)即可运行程序。</p>
<p><img src="https://oss.chundot.xyz/picgo/ns3XE8fithJSgc6.png" alt="image-20220309205239545"></p>
<h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><p>在编辑器中<strong>右键</strong> -&gt; <strong>Format use AStyle</strong> 即可直接格式化代码。</p>
<p><img src="https://oss.chundot.xyz/picgo/rA2KMziYGCTq367.gif" alt="cb-format"></p>
<h4 id="代码补全-1"><a href="#代码补全-1" class="headerlink" title="代码补全"></a>代码补全</h4><p>默认开启代码补全，按<code>tab</code>或<code>Enter</code>都可以完成代码。</p>
<p><img src="https://oss.chundot.xyz/picgo/LwG8sKiVemIpqJn.gif" alt="cb-completion"></p>
<p>从测试可以看到代码补全<strong>功能有限</strong>，仅限<strong>头文件</strong>，<strong>类型</strong>，<strong>数据结构</strong>和一些<strong>标识符</strong>；<strong>函数基本无补全</strong>。</p>
<p>虽然测试比较局限，但大部分的机器基本一致。</p>
<h3 id="优缺点总结-1"><a href="#优缺点总结-1" class="headerlink" title="优缺点总结"></a>优缺点总结</h3><ul>
<li>开源免费，更新活跃；</li>
<li>代码补全功能聊胜于无；</li>
<li><strong>机房</strong>和<strong>小项目开发</strong>比较合适的选择。</li>
</ul>
<hr>
<h2 id="C-Free"><a href="#C-Free" class="headerlink" title="C-Free"></a>C-Free</h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h3><p>首先这个软件是<strong>付费</strong>的，80 元可以免费升级一年。</p>
<p>其次这个软件<strong>最后一次更新在 2010 年</strong>。</p>
<p><strong>机房电脑基本都有预装，但不如上面提到的两个 IDE，不推荐使用</strong>。</p>
<h3 id="优缺点总结-2"><a href="#优缺点总结-2" class="headerlink" title="优缺点总结"></a>优缺点总结</h3><ul>
<li>付费软件；</li>
<li>更新停滞在 2010 年；</li>
<li>有其他软件的情况下<strong>不推荐使用</strong>。</li>
</ul>
<hr>
<h2 id="Visual-Studio-Code"><a href="#Visual-Studio-Code" class="headerlink" title="Visual Studio Code"></a>Visual Studio Code</h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h3><p>微软团队的开源代码编辑器。</p>
<p><a href="https://code.visualstudio.com/">可以在 vs code 官网下载最新版本。</a></p>
<p>想要入门或了解 vs code 的强大功能可以看另一篇文章。</p>
<p><img src="https://oss.chundot.xyz/picgo/8cWuBzF4XeAjdE2.gif" alt="vscode-w-clang"></p>
<p>配置相对比较复杂，可以检索网上各种 vs code 配置 C&#x2F;C++的文章。</p>
<p>适合<strong>个人开发</strong>使用，机房可能需要自己安装，<strong>但机考是不会给机会装软件的</strong>。</p>
<h3 id="优缺点总结-3"><a href="#优缺点总结-3" class="headerlink" title="优缺点总结"></a>优缺点总结</h3><ul>
<li>开源免费；</li>
<li>支持非常多编程语言的开发（内置支持或扩展支持）；</li>
<li>扩展丰富；</li>
<li>设置和扩展设置十分<strong>复杂</strong>，很多开发需要手动配置；</li>
<li>适合<strong>个人项目开发</strong>，<strong>机房无预装</strong>。</li>
</ul>
<hr>
<h2 id="Visual-Studio"><a href="#Visual-Studio" class="headerlink" title="Visual Studio"></a>Visual Studio</h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h3><p>微软的 IDE。</p>
<p><a href="https://visualstudio.microsoft.com/zh-hans/">可以在 Visual Studio 官网下载各种版本的安装程序</a>。</p>
<p>基本可以<strong>零配置</strong>写 C&#x2F;C++，C#等。</p>
<p>这个比较适合写大型的 C&#x2F;C++项目。</p>
<p>目前最新版已经到了 2022，支持 64 位。</p>
<p>安装时只需要<strong>选择自己需要的模块</strong>，之后也可以随时安装卸载其他模块，不需要纠结太多。</p>
<p><img src="https://oss.chundot.xyz/picgo/WoaDQnP7rtGB2vq.png" alt="image-20220309201453870"></p>
<h3 id="优缺点总结-4"><a href="#优缺点总结-4" class="headerlink" title="优缺点总结"></a>优缺点总结</h3><ul>
<li>社区版免费，功能够用；</li>
<li>体积占用过大；</li>
<li>开发<strong>有规模的项目</strong>合适；不能运行单文件，必须创建项目；<strong>机房无预装</strong>。</li>
</ul>
<hr>
<h2 id="CLion"><a href="#CLion" class="headerlink" title="CLion"></a>CLion</h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h3><p>JetBrains 开发的 IDE。</p>
<p><a href="https://www.jetbrains.com/clion/">可以在官网下载最新版本</a>。</p>
<p>基本<strong>零配置</strong>即可编译运行 C&#x2F;C++代码。</p>
<p>全系软件都是<strong>付费订阅制</strong>，但<strong>在读学生可以免费使用</strong>，用<strong>学校邮箱</strong>注册认证学生身份即可。</p>
<h3 id="优缺点总结-5"><a href="#优缺点总结-5" class="headerlink" title="优缺点总结"></a>优缺点总结</h3><ul>
<li>学生免费；</li>
<li>体积占用相对较大；</li>
<li>适合开发<strong>有规模的项目</strong>；<strong>机房无预装</strong>。</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul>
<li>如果上<strong>机房</strong>，<strong>Dev C++<strong>和</strong>Code::Blocks</strong>这两个预装的软件是比较好的，课程如果有需要机考的强烈建议熟悉一下；</li>
<li>其他情况像<strong>大作业和项目开发</strong>，<strong>vs code</strong>、<strong>Visual Studio</strong>和<strong>CLion</strong>是非常好的选择。</li>
</ul>
<p>当然，机考能不能过还是要看个人积累的，工具及熟练度只占一小部分。</p>
<p>趁着还在学 C 语言，打好<strong>数据结构</strong>和<strong>算法</strong>的基础，到哪都不慌。</p>
<hr>
<h2 id="关于计算机协会"><a href="#关于计算机协会" class="headerlink" title="关于计算机协会"></a>关于计算机协会</h2><ul>
<li>计协有自己的博客啦：<a href="https://nbtca.space/">https://nbtca.space/</a></li>
<li>如果你<strong>碰到学习中的种种问题</strong>，想更加<strong>深入学习计算机软硬件知识</strong>；做<strong>网页</strong>，做<strong>游戏</strong>，做<strong>应用</strong>；修<strong>电脑</strong>，玩<strong>硬件</strong>，做<strong>志愿者活动</strong>；不妨来<strong>计算机协会之家</strong>看看，总有热心的程序员<del>秃头</del>会解决你的问题！</li>
</ul>
<p><img src="https://oss.chundot.xyz/picgo/17Yizy52PBMZarL.png" alt="image-20220309214828491"></p>
<ul>
<li>关注我们定期举办的<strong>理工维修日</strong>（不仅仅是维修），成为<strong>志愿者</strong>，或是来这里进行<strong>软件配置</strong>问题和<strong>硬件</strong>咨询，我们非常欢迎！</li>
</ul>
<p><img src="https://oss.chundot.xyz/picgo/3TX1Jiphz5MGHKA.png" alt="image-20220309222044480"></p>
<!-- for wechat -->
<!-- ![image-20220309222044480](https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/banner_simple.png) -->
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>ide</tag>
        <tag>c/c++</tag>
      </tags>
  </entry>
  <entry>
    <title>寝室软路由记录</title>
    <url>/2022/03/unraid-notes/</url>
    <content><![CDATA[<h1 id="寝室软路由记录"><a href="#寝室软路由记录" class="headerlink" title="寝室软路由记录"></a>寝室软路由记录</h1><blockquote>
<p>本文事件开始于 2020 年 5 月，部分内容可能不适用于当下，提及的硬件价格请以市场价格为准。</p>
</blockquote>
<h2 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h2><p>说是软路由，实际上更像是一个低功耗的服务器了。除了路由系统之外，也可以作为一个 NAS 来使用，或者是在上面部署一些自己的服务。</p>
<p>决定组一台软路由的直接原因由于时间隔得太久，已经记不清了。但是装软路由的念头是从很久之前就有了。配一台电脑，有一个折腾的机会本身就是很让人感到兴奋的事了，再加上从最开始 linus<a href="https://www.bilibili.com/video/BV1vx411B7Db">视频</a>里的服务器，到现在很多视频创作者分享的使用服务器储存，压制素材的经验，看到服务器给他们带来的便利，自己就也想体验一下了。</p>
<p>同时在寝室应用场景下，对于多设备网络连接和文件存储共享的需求比较强烈。一台服务器刚好能够覆盖我们的需求。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/jnNsb2.png" alt="LTT"></p>
<h2 id="路程"><a href="#路程" class="headerlink" title="路程"></a>路程</h2><h3 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h3><h4 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h4><p>在论坛上看到了很多 j1900 的方案，我们最开始也是选择了 J1900，但在某次机缘巧合下体验到它的性能之后就开始对选择产生了怀疑。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/20220312212521.png" alt="j1900"></p>
<p>之后也看到了和 j1900 类似但是性能强一点的方案， 但是总还是看着感觉不靠谱。后来在 chh 上看到了一个用速龙 200ge 的方案，看起来靠谱很多，性能也够用，但是 TDP 和价格都高出不少。选择陷入了僵局。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/20220312213204.png" alt="速龙200ge"></p>
<p>转机发生在看到了某位即将毕业学长发出的出售信息，学长的价格非常优惠。我们收购后，出售了功耗较高的部件，售后多余的资金和留下的机箱，磁盘等部件使得我们能够接受速龙 200ge 的价格，完成了软路由主机的配置。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/Screenshot_2022-03-12-19-42-37-153_com.tencent.mo.jpg" alt="出售信息"></p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/QQ%E5%9B%BE%E7%89%8720220312194447.jpg" alt="板U套装"></p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/QQ%E5%9B%BE%E7%89%8720220312194345.jpg"></p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/QQ%E5%9B%BE%E7%89%8720220312205957.png"></p>
<table>
<thead>
<tr>
<th></th>
<th>配件</th>
<th>价格</th>
</tr>
</thead>
<tbody><tr>
<td>CPU</td>
<td>AMD 速龙 200ge</td>
<td>-（和主板一起）</td>
</tr>
<tr>
<td>主板</td>
<td>华擎 A320M</td>
<td>489</td>
</tr>
<tr>
<td>散热</td>
<td>AMD“幽灵”棱镜 (Wraith Prism)</td>
<td>12（朋友装机剩下的，只付了邮费）</td>
</tr>
<tr>
<td>内存</td>
<td>DDR4 8GB 2666</td>
<td>125</td>
</tr>
<tr>
<td>显卡</td>
<td>Radeon™ Vega 3 Graphics 核显</td>
<td>-</td>
</tr>
<tr>
<td>网卡</td>
<td>英特尔 82576EB 双口千兆</td>
<td>104</td>
</tr>
<tr>
<td>机箱</td>
<td>收购再利用</td>
<td>-</td>
</tr>
<tr>
<td>电源</td>
<td>先马 金牌 500W</td>
<td>-</td>
</tr>
<tr>
<td>SSD</td>
<td>西数 SSD 240GB</td>
<td>-（收购再利用）</td>
</tr>
<tr>
<td>HDD</td>
<td>希捷 HDD 1TB</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td>希捷 HDD 500GB</td>
<td>-</td>
</tr>
<tr>
<td></td>
<td>西数 HDD 500GB</td>
<td>-</td>
</tr>
</tbody></table>
<p>电源和机械盘都是从家里拿来的之前用剩下的。最后抵扣出售二手部件的收入，总价格大概在 200-300 元。</p>
<h4 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h4><p>在系统的选择上我们没有怎么纠结，直接选择了 Unraid。</p>
<p>考虑到出发点不是主要在存储上，对读写速度以及数据安全并没有太大的的要求，甚至存在上面的文件部分丢失应该也是可以接受的，我们就觉得 Unraid 这种可以后续添加硬盘的方式相比于 raid 会更加适合我们。Unraid 上可以友好的使用虚拟机和 Docker 也能让我们便利的部署一些自己的服务。再加上在 Linus 的视频里很多次看他用到了 Unraid，也想自己尝试一下。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/uUVHli.png" alt="第一次见到unraid"></p>
<p>在路由系统上，由于之前在路由器上刷过 openwrt，对它的一些设置感觉已经有点熟练了，也成功实现校园网的拨号，这里就直接选择了继续使用 openwrt。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/DfcfL0.png" alt="openwrt"></p>
<p>使用的固件出于网络等原因没有选择自己编译，在<a href="https://www.right.com.cn/forum/">恩山论坛</a>上找了一个固件直接拿来用了。（具体的帖子已经找不到了。。。）</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/Oj6hze.png" alt="恩山无线论坛"></p>
<h3 id="组装-amp-配置"><a href="#组装-amp-配置" class="headerlink" title="组装&amp;配置"></a>组装&amp;配置</h3><p>组装和配置的过程没有什么难的部分，跟着教程走就可以了。我们在配置的时候遇到的问题都是教程没有看清楚导致的。胆大心细，应该就没什么问题了。</p>
<h4 id="硬件部分"><a href="#硬件部分" class="headerlink" title="硬件部分"></a>硬件部分</h4><p>这里就只放几张组装时拍的图了。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/20220312214619.png" alt="cpu"></p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/20220312214440.png" alt="网卡"></p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/20220312214337.png" alt="开机"></p>
<h4 id="软件部分"><a href="#软件部分" class="headerlink" title="软件部分"></a>软件部分</h4><p>Unraid 的部分参考 b 站上司波图的<a href="https://www.bilibili.com/video/BV1nE411B73Y">教程</a>就行了，讲的非常仔细，注意不要睡着就可以了。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/20220312214716.png" alt="Unraid教程"></h2><h2 id="体验"><a href="#体验" class="headerlink" title="体验"></a>体验</h2><h3 id="储存"><a href="#储存" class="headerlink" title="储存"></a>储存</h3><p>这个感觉是带来的最大便利。平时的一些学习资料或者游戏之类的大文件放在上面寝室里传一下很方便，出去帮忙修电脑的时候也可以直接用 ftp 连回来找一点工具或者安装包这种，活动要用的文件放在上面也方便参加的人直接去拿。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-03-07%2014.36.34.png"></p>
<p>Mac 也可以用 Time Machine 备份在上面，用起来会安心一点。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-03-07%2014.35.48.png"></p>
<h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>在 openwrt 上使用校园网拨号上网，可以多设备连接。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/Snipaste_2022-03-12_21-57-49.png"></p>
<p>最后网络的布置是这样的。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E5%AF%9D%E5%AE%A4%E7%BD%91%E7%BB%9C%E6%8B%93%E6%89%91%E5%9B%BE.png"></p>
<h3 id="Unraid"><a href="#Unraid" class="headerlink" title="Unraid"></a>Unraid</h3><p>Unraid 用起来感觉还可以，比较适合我们这种陆续加硬盘的情况。图中的几块硬盘除了做缓存的固态，其余的都是从家里带来的旧硬盘。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-03-07%2014.26.35.png"></p>
<p>自带的 docker 和虚拟机用起来感觉都很方便。</p>
<p>v2ray 可以方便寝室里没有买校园网的几位室友连回寝室来上网，稍微省一点流量。</p>
<p>aria2 可以在校园网范围内控制远程下载，在下载大文件时比较方便。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-03-07%2014.24.57.png" alt="docker运行的服务"></p>
<p>我们在上面开了两个虚拟机。一个装了 openwrt 做路由器，另一个装了 ubuntu，在需要部署一些服务的时候会用到。</p>
<p>在上面曾经部署过一个内网的 minecraft 服务器，实现校园网内部联机。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/%E6%88%AA%E5%B1%8F2022-03-07%2014.33.19.png"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总而言之，整套系统无论是文件存储还是 docker 应用部署，都十分便利。站在今天的角度上来看，当初选购 200ge 无疑是十分正确的选择，在购买后，市场上的 200ge 也出现了大幅涨价的现象。但是 A320 主板购入的价格略高，目前在闲鱼上 100 元左右应该就可以买到了。搭建这台软路由让我们大量接触到了计算机网络以及 linux 方面的知识，受益良多，在之后课程的学习上也有了可以实际参考的经验。</p>
<p><img src="https://clas-bucket.oss-cn-hangzhou.aliyuncs.com/uPic/QQ%E5%9B%BE%E7%89%8720220312222019.jpg" alt="两年之后的运行状况"></p>
]]></content>
      <categories>
        <category>硬件</category>
      </categories>
      <tags>
        <tag>软路由</tag>
        <tag>硬件折腾</tag>
        <tag>unraid</tag>
      </tags>
  </entry>
  <entry>
    <title>逆向工程实战</title>
    <url>/2022/03/reverse-practice/</url>
    <content><![CDATA[<h1 id="逆向工程实战"><a href="#逆向工程实战" class="headerlink" title="逆向工程实战"></a>逆向工程实战</h1><h2 id="破解软件序列号"><a href="#破解软件序列号" class="headerlink" title="破解软件序列号"></a>破解软件序列号</h2><p>这一部分主要讲述破解《加密与解密》一书中一个带有序列号保护机制的程序。</p>
<p>调试工具: OllyDBG(吾爱破解专版)</p>
<p>操作系统: Windows 10</p>
<h3 id="观察功能"><a href="#观察功能" class="headerlink" title="观察功能"></a>观察功能</h3><p>首先点击软件运行：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330191605526.png" alt="image-20220330191605526"></p>
<p>弹出注册对话框，向输入框随便输入一些字符：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330191552434.png" alt="image-20220330191552434"></p>
<p>程序弹窗，报出输入错误。</p>
<h3 id="初步调试"><a href="#初步调试" class="headerlink" title="初步调试"></a>初步调试</h3><p>在此之前，书中给出了一些提示信息，本程序采用非对等函数检查序列号，用户名是纯英文字符串，序列号是纯数字。</p>
<p>如果输入的用户名和序列号满足 F1(用户名)&#x3D;F2(序列号) ，则认为是正确的序列号。</p>
<p>采用这种方法，可以使内存中不出现明码。</p>
<p>现在使用OllyDBG调试该程序：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195111975.png" alt="image-20220330195111975"></p>
<p>在程序的开头可以看见一些win32窗口程序的启动代码。</p>
<p>例如<code>RegisterClass</code>和<code>CreateWindow</code>函数都是一些创建窗口的必要操作，但这些并非是关注的重点：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195134746.png" alt="image-20220330195134746"></p>
<p>现在右击界面-&gt;<strong>search for</strong>-&gt;<strong>All referenced strings text</strong> 查看字符串列表：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195213303.png" alt="image-20220330195213303"></p>
<p>可以看到一些字符串信息。</p>
<p>双击其中”Incorrect! Try again”字符串，就可以来到对应代码处：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195242736.png" alt="image-20220330195242736"></p>
<p>观察代码可知，这里的操作是弹窗，调用<code>MessageBox</code>函数，告知用户输入错误，在此处打上断点。</p>
<p>按F9，执行到底，可以发现窗口被完全显示了出来，现在再点开注册对话框，向name输入”test”，向序列号输入”123456”：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195316160.png" alt="image-20220330195316160"></p>
<p>程序停在了断点处，此时再打开字符串列表：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195408233.png" alt="image-20220330195408233"></p>
<p>现在可以找到刚刚输入的内容，双击查看：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195423616.png" alt="image-20220330195423616"></p>
<p>不难推测，这两个push字符串的操作紧跟着的两个call分别都调用了各自的转换函数，即上文提到的F和F2，在这两个地方下断点。</p>
<p><code>Ctrl+F2</code>重启程序，按F9后点开注册对话框，输入和之前一样的字符，运行到断点处：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195523647.png" alt="image-20220330195523647"></p>
<p>继续往下执行，之后可以发现运行下面高亮处代码后就会报出错误窗口：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195541775.png" alt="image-20220330195541775"></p>
<p>实际上是跳转到了下方的代码，之前提到的调用了<code>MessageBox</code>的位置：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195559752.png" alt="image-20220330195559752"></p>
<p>重启程序，查看刚刚的位置：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195619070.png" alt="image-20220330195619070"></p>
<p><code>je</code>指令显然是个条件判断，可以推测这里是在判断结果正确性，如果不正确则不跳转，往下执行，之后弹窗。</p>
<p>那就将<code>je</code>修改一下即可，将高亮行放在<code>je</code>指令上，按空格键：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330195637768.png" alt="image-20220330195637768"></p>
<p>修改完毕，继续执行：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194913160.png" alt="image-20220330194913160"></p>
<p>运行到此处：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194855414.png" alt="image-20220330194855414"></p>
<p>程序完美地越过了上一个call，没有引发报错弹窗：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194831295.png" alt="image-20220330194831295"></p>
<p><strong>破解成功</strong>！</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194805471.png" alt="image-20220330194805471"></p>
<p>实际上这段程序是执行到了下面的代码位置：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194742864.png" alt="image-20220330194742864"></p>
<h3 id="算法逆向"><a href="#算法逆向" class="headerlink" title="算法逆向"></a>算法逆向</h3><p>现在来尝试还原两个加密函数，现在回车进入第一个加密函数F1(call 0040137E处)：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194659075.png" alt="image-20220330194659075"></p>
<p>第一句代码是将esp+0x4地址处的数据放入寄存器，显然这是压入栈的字符串”test”的首地址，在后续的一系列操作结束后，会将这个值再从栈取出，来指向字符串首地址。</p>
<p><code>push esi</code>是将esi寄存器的值入栈，mov指令是取字符串中的 1 个字节，test al,al是判断是否为 0 ，实际上是在判断是否到了字符串的末尾：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194630302.png" alt="image-20220330194630302"></p>
<p>如果到了末尾，那么test指令就会修改标志寄存器对应的比特位，下一行的je指令就会被执行，直接跳转到其他地方。</p>
<p>如果没有到末尾，那么这一句指令不会被执行，而是继续顺序往下执行。cmp al,0x41的作用是比较，在上面的操作中，al已经存入了字符串中的 1 个字节，那么这一步操作实际上是在比较字符ASCII值的大小，配合jb指令可以判断是否为字母，如果不是字母则跳转到004013AC，这个地址就是弹出错误窗口的代码处：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194610223.png" alt="image-20220330194610223"></p>
<p>同理<code>cmp al,0x5A</code>是和字母Z比较，配合<code>jnb</code>指令，判断是否为小写字母，如果是小写字母，则跳到00401394 ，执行call 004013D2，查看004013D2处代码：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194547967.png" alt="image-20220330194547967"></p>
<p><code>sub al,0x20</code>是将al中的值减去0x20，实际上是将ACII码减去0x20，目的是将小写字母转换为大写字母，然后再将结果放到原来的地址[esi]中。</p>
<p><code>inc esi</code>，是将esi中的值自加 1 ，在代码中的目的是指向字符串中的下一个字符，可以当成一个“指针”，转换大小写后同样要将esi加 1 以指向下一个字符，因此这里有两处<code>inc esi</code>。</p>
<p>下一个<code>jmp</code>指令是回跳到前面的代码地址，显然这是在循环中。那么这个循环的退出条件显然是上文提到的字符串中的字符全被取完。</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194516902.png" alt="image-20220330194516902"></p>
<p>循环过后，<code>pop esi</code>的目的是重新指向字符串首地址，将最初压入栈的esi+0x4地址处的值放入esi。</p>
<p>现在重新指向字符串首地址后，又执行了call 004013C2，现在查看对应代码：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194453624.png" alt="image-20220330194453624"></p>
<p><code>xor edi,edi</code>是清 0 操作，数字和自己做异或运算结果是 0 ，同样<code>xor ebx,ebx</code>也是清 0。</p>
<p>下面的<code>mov</code>操作和上文提到过的一样，是取一个字符，<code>je</code>同样是条件判断，结合下面的<code>inc</code>指令和<code>jmp</code>指令来看，循环取出 1 个字符进行操作，当字符取完则跳到<code>retn</code>指令。</p>
<p>未取完字符时，执行add edi,ebx。</p>
<p>bl存储的数据是ebx寄存器中数据的低 8 位，或者说是ebx的低字节(ebx的高 8 位是bh,低 8 位是bl)，现在ebx的高 8 位都是 0 ，那么实际上ebx存储的就是字符的值。因为add指令要求所操作的寄存器宽度一样，所以不能直接拿bl进行运算。</p>
<p>那么这一步add的操作就是将字符的值加到edi里，整个代码的作用是循环将用户输入的字符的值加到一个变量里。</p>
<p>函数结束后，edi中保存的就是所以字符值的和，<code>xor edi,0x5678</code>就是将这个和与0x5678做异或运算。</p>
<p>那么到这里，整个函数已经很清晰了。这个函数在做的操作是循环取出整个字符串的每个字符，如果不是字母则报错，如果是小写字母则减0x20转成大写字母，同时将这些字符的值求和，与0x5678异或。</p>
<p>现在可以轻松写出对应的C语言代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">F1</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> k1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">=</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token char">'A'</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">></span> <span class="token char">'Z'</span><span class="token punctuation">)</span>
      ch <span class="token operator">-=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>
    k1 <span class="token operator">+=</span> ch<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  k1 <span class="token operator">^=</span> <span class="token number">0x5678</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> k1<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>下面就看F2的代码：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194426456.png" alt="image-20220330194426456"></p>
<p>前 3 步<code>xor</code>都是将寄存器清 0 ，下面的<code>mov</code>是取出字符串首地址放入esi，esi作为指针指向字符串首地址。</p>
<p><code>mov al,0xA</code>将eax的值设置为0xA，紧接着的<code>mov bl</code>,…、<code>test bl,bl</code> 和<code>je</code> … 是从字符串取出一个字符和判0 。</p>
<p>sub b1,0x30是将寄存器中的值减去0x30，即是将字符的值减去0x30，<code>imul edi,eax</code>是将edi和eax作乘法，这里eax已经赋值为 10 了，因此这条指令等价于edi &#x3D; edi * 10。</p>
<p>其后的add指令是将edi的值与ebx的值相加。</p>
<p>这几条语句连贯起来看，其实就是 edi &#x3D; (edi*10) + (字符-0x30)，循环这个操作。整个循环结束后将edi的值与0x1234异或，放入ebx作为返回值。</p>
<p>分析后，可以很轻松还原出下列代码：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">F2</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>code<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> k2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    k2 <span class="token operator">+=</span> k2 <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">0x30</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  k2 <span class="token operator">^=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> k2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>从上述代码不难看出，代码中的循环实际上是将数字字符串转化为int型纯数字(“123456”-&gt;123456)。</p>
<p>现在只要上述两个函数的返回k1与k2相等，即可注册成功。</p>
<p>编写注册机时要对函数F1或F2进行逆变换，如果不能就只能穷举了。</p>
<p>异或运算是可以求逆的，还有这里有个小细节要注意：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194354839.png" alt="image-20220330194354839"></p>
<p>观察<code>GetDlgItemTextA</code>的参数可知，该函数只读入11(0xB)个字符，末尾的 0 用去 1 个，那么实际的name字符串只有10个字符。</p>
<p>下面是完整的注册机代码:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token keyword">int</span> <span class="token function">keygen</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span> k1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> k2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token keyword">char</span> ch<span class="token punctuation">;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    ch <span class="token operator">=</span> name<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">&lt;</span> <span class="token char">'A'</span><span class="token punctuation">)</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">></span> <span class="token char">'Z'</span><span class="token punctuation">)</span>
      ch <span class="token operator">-=</span> <span class="token number">0x20</span><span class="token punctuation">;</span>
    k1 <span class="token operator">+=</span> ch<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  k2 <span class="token operator">=</span> k1 <span class="token operator">^</span> <span class="token number">0x5678</span> <span class="token operator">^</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> k2<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input name: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">scanf_s</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span> <span class="token function">keygen</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>
<p>输入该注册码，注册成功！</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330194322408.png" alt="image-20220330194322408"></p>
<h2 id="解除软件使用时限"><a href="#解除软件使用时限" class="headerlink" title="解除软件使用时限"></a>解除软件使用时限</h2><p>这一部分主要讲述对《加密与解密》一书中一个带有时间限制的程序的破解。</p>
<p>开发工具: Visual Studio 2019。</p>
<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><p>时间限制程序有两类，一类是限制每次运行的时长，另一类是每次运行时长不限，但是有时间限制，例如 30 天、 14 天、 7 天等。</p>
<h4 id="计时器"><a href="#计时器" class="headerlink" title="计时器"></a>计时器</h4><p>有一类程序，每次运行时都有时间限制，例如运行 10 分钟或者 20 分钟就停止，必须重新运行程序才可正常工作。</p>
<p>这类程序里有一个计时器来统计程序运行的时间。在Windows系统中，有如下选择可以实现一个计时器。</p>
<h4 id="SetTimer函数"><a href="#SetTimer函数" class="headerlink" title="SetTimer函数"></a>SetTimer函数</h4><p>微软官方文档中函数原型如下:</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">UINT_PTR <span class="token function">SetTimer</span><span class="token punctuation">(</span>
    <span class="token punctuation">[</span> in<span class="token punctuation">,</span> optional <span class="token punctuation">]</span> HWND hWnd<span class="token punctuation">,</span> <span class="token punctuation">[</span>in<span class="token punctuation">]</span> UINT_PTR nIDEvent<span class="token punctuation">,</span> <span class="token punctuation">[</span>in<span class="token punctuation">]</span> UINT uElapse<span class="token punctuation">,</span>
    <span class="token punctuation">[</span> in<span class="token punctuation">,</span> optional <span class="token punctuation">]</span> TIMERPROC lpTimerFunc<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>

<ul>
<li><code>hWnd</code> ：窗口句柄，若计时器到时，系统会向这个窗口发送<code>WM_TIMER</code>消息；</li>
<li><code>nIDEvent</code> ：计时器标识；</li>
<li><code>uElapse</code> ：指定计时器时间间隔；</li>
<li><code>TIMEPROC</code> ：回调函数。若计时器超时，系统将调用这个函数。如果为NULL，若计时器超时，将向相应的窗口发送<code>WM_TIMER</code>消息。</li>
</ul>
<p>应用程序可在初始化时调用这个API函数，向系统申请一个计时器并指定计时器的时间间隔，同时获得一个处理计时器超时的回调函数。</p>
<p>若计时器超时，系统会向申请该计时器的窗口过程发送消息<code>WM_TIMER</code>，或者调用程序提供的回调函数。</p>
<p><code>SetTimer</code>函数是以Windows消息的方式工作的，精度受到了一定的限制。</p>
<p>当程序不需要计时器时，可以调用<code>KillTimer</code>函数来销毁。</p>
<p>下面直接通过程序来演示：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stdio.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"windows.h"</span></span>

LRESULT CALLBACK <span class="token function">MainWndProc</span><span class="token punctuation">(</span>HWND<span class="token punctuation">,</span> UINT<span class="token punctuation">,</span> WPARAM<span class="token punctuation">,</span> LPARAM<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 窗口回调函数</span>
<span class="token keyword">void</span> CALLBACK <span class="token function">TimeProc</span><span class="token punctuation">(</span>HWND<span class="token punctuation">,</span> UINT<span class="token punctuation">,</span> UINT<span class="token punctuation">,</span> DWORD<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> APIENTRY <span class="token function">WinMain</span><span class="token punctuation">(</span>HINSTANCE hInstance<span class="token punctuation">,</span> HINSTANCE hPrevInstance<span class="token punctuation">,</span>
                     LPSTR szCmdLine<span class="token punctuation">,</span> <span class="token keyword">int</span> nCmdShow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> szClassName<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"MainWClass"</span><span class="token punctuation">;</span>
  <span class="token comment">//定义窗口类</span>
  WNDCLASSEX wndclass <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token comment">//窗口类大小</span>
  wndclass<span class="token punctuation">.</span>cbSize <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>wndclass<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//纵横向重画</span>
  wndclass<span class="token punctuation">.</span>style <span class="token operator">=</span> CS_HREDRAW <span class="token operator">|</span> CS_VREDRAW<span class="token punctuation">;</span>
  <span class="token comment">//绑定回调函数</span>
  wndclass<span class="token punctuation">.</span>lpfnWndProc <span class="token operator">=</span> MainWndProc<span class="token punctuation">;</span>
  <span class="token comment">//绑定实例句柄</span>
  wndclass<span class="token punctuation">.</span>hInstance <span class="token operator">=</span> hInstance<span class="token punctuation">;</span>
  <span class="token comment">//加载默认图标</span>
  wndclass<span class="token punctuation">.</span>hIcon <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">LoadIcon</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDI_APPLICATION<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//加载默认光标</span>
  wndclass<span class="token punctuation">.</span>hCursor <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">LoadCursor</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> IDC_ARROW<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//加载背景 白色画刷</span>
  wndclass<span class="token punctuation">.</span>hbrBackground <span class="token operator">=</span> <span class="token punctuation">(</span>HBRUSH<span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">GetStockObject</span><span class="token punctuation">(</span>WHITE_BRUSH<span class="token punctuation">)</span><span class="token punctuation">;</span>
  wndclass<span class="token punctuation">.</span>lpszClassName <span class="token operator">=</span> szClassName<span class="token punctuation">;</span>
  <span class="token comment">//向系统内核注册窗口类</span>
  <span class="token operator">::</span><span class="token function">RegisterClassEx</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>wndclass<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//创建主窗口</span>
  HWND hWnd <span class="token operator">=</span> <span class="token operator">::</span><span class="token function">CreateWindowEx</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>
                               szClassName<span class="token punctuation">,</span> <span class="token comment">//类名</span>
                               <span class="token string">"win32 窗口程序"</span><span class="token punctuation">,</span> WS_OVERLAPPEDWINDOW<span class="token punctuation">,</span>
                               CW_USEDEFAULT<span class="token punctuation">,</span> CW_USEDEFAULT<span class="token punctuation">,</span> CW_USEDEFAULT<span class="token punctuation">,</span>
                               CW_USEDEFAULT<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> hInstance<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">SetTimer</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> TimeProc<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 设定计时器</span>
  <span class="token comment">//错误处理</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token constant">NULL</span> <span class="token operator">==</span> hWnd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">::</span><span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token string">"Create Window failed"</span><span class="token punctuation">,</span> <span class="token string">"ERROR"</span><span class="token punctuation">,</span> MB_OK<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//显示窗口</span>
  <span class="token operator">::</span><span class="token function">ShowWindow</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> nCmdShow<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token operator">::</span><span class="token function">UpdateWindow</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">//从操作系统的消息队列中不断检索消息</span>
  MSG msg<span class="token punctuation">;</span>
  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">::</span><span class="token function">GetMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token operator">::</span><span class="token function">TranslateMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//翻译消息</span>
    <span class="token operator">::</span><span class="token function">DispatchMessage</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//派发消息</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> msg<span class="token punctuation">.</span>wParam<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
LRESULT CALLBACK <span class="token function">MainWndProc</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> UINT message<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span>
                             LPARAM lParam<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">switch</span> <span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">case</span> WM_DESTROY<span class="token operator">:</span>
    <span class="token function">PostQuitMessage</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token comment">//剩下的交给系统默认处理</span>
  <span class="token keyword">return</span> <span class="token operator">::</span><span class="token function">DefWindowProc</span><span class="token punctuation">(</span>hWnd<span class="token punctuation">,</span> message<span class="token punctuation">,</span> wParam<span class="token punctuation">,</span> lParam<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> CALLBACK <span class="token function">TimeProc</span><span class="token punctuation">(</span>HWND hWnd<span class="token punctuation">,</span> UINT uMsg<span class="token punctuation">,</span> UINT idEvent<span class="token punctuation">,</span> DWORD dwTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  SYSTEMTIME time<span class="token punctuation">;</span>
  <span class="token function">GetSystemTime</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
  CHAR szTime<span class="token punctuation">[</span><span class="token number">255</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token function">sprintf_s</span><span class="token punctuation">(</span>szTime<span class="token punctuation">,</span> <span class="token string">"%d-%d-%d-%d:%d:%d"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>wYear<span class="token punctuation">,</span> time<span class="token punctuation">.</span>wMonth<span class="token punctuation">,</span> time<span class="token punctuation">.</span>wDay <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">,</span>
            time<span class="token punctuation">.</span>wHour<span class="token punctuation">,</span> time<span class="token punctuation">.</span>wMinute<span class="token punctuation">,</span> time<span class="token punctuation">.</span>wSecond<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">MessageBox</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">,</span> szTime<span class="token punctuation">,</span> <span class="token string">"系统时间"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>

<p>上述代码创建了一个窗口和一个计时器，设置visual studio链接器的子系统为窗口：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204302596.png" alt="image-20220330204302596"></p>
<p>运行程序：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330201027856.png" alt="image-20220330201027856"></p>
<p>运行结果上所示，定时器每 1 秒弹出一个窗口。</p>
<h4 id="高精度多媒体计时器"><a href="#高精度多媒体计时器" class="headerlink" title="高精度多媒体计时器"></a>高精度多媒体计时器</h4><p>多媒体计时器的精度可以达到 1 毫秒，应用程序可以通过调用TimeSetEvent函数来启动一个多媒体计时器。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">MMRESULT <span class="token function">timeSetEvent</span><span class="token punctuation">(</span>UINT uDelay<span class="token punctuation">,</span> UINT uResolution<span class="token punctuation">,</span> LPTIMECALLBACK lpTimeProc<span class="token punctuation">,</span>
                      DWORD_PTR dwUser<span class="token punctuation">,</span> UINT fuEvent<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<h4 id="GetTickCount函数"><a href="#GetTickCount函数" class="headerlink" title="GetTickCount函数"></a>GetTickCount函数</h4><p>Windows提供了API函数GetTickCount()，该函数返回的是系统自成功启动以来所经过的时间(以毫秒为</p>
<p>单位)。将该函数的两次返回值相减，就能知道程序已经运行了多久，这个函数的精度取决于系统的设</p>
<p>置。</p>
<h4 id="timeGetTime函数"><a href="#timeGetTime函数" class="headerlink" title="timeGetTime函数"></a>timeGetTime函数</h4><p>多媒体计时器函数timeGetTime也可以返回windows自启动后所经过的时间(以毫秒为单位)</p>
<h3 id="拆解时间限制保护"><a href="#拆解时间限制保护" class="headerlink" title="拆解时间限制保护"></a>拆解时间限制保护</h3><p>打开实例程序：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204327843.png" alt="image-20220330204327843"></p>
<p>只要下方的计时器走到 20 ，程序就会自动退出。</p>
<p>书中提示这个程序使用了<code>SetTimer</code>函数，将其放入OllyDBG进行调试：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204357729.png" alt="image-20220330204357729"></p>
<p>右击界面-&gt; <strong>search for</strong>-&gt; <strong>All intermodular calls</strong> 打开调用API列表：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204421684.png" alt="image-20220330204421684"></p>
<p>双击此处，来到对应代码处：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204448123.png" alt="image-20220330204448123"></p>
<p>可以直接修改汇编代码，让程序跳过<code>call SetTimer</code>，如下所示：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204510290.png" alt="image-20220330204510290"></p>
<p><code>jmp</code>指令使得执行流会越过<code>SetTimer</code>。</p>
<p>按F9直接运行，可以发现，下方的计时数字消失了，证明计时器已经成功被拆除：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204531250.png" alt="image-20220330204531250"></p>
<p>当然还有其他办法：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204958834.png" alt="image-20220330204958834"></p>
<p>这里可以发现一个比较，实际上eax存取的是当前计时，超过0x13则跳到另一处代码，此处代码执行的是<code>SendMessage</code>函数，向窗口发送<code>WM_CLOSE</code>消息来关闭窗口：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330205025475.png" alt="image-20220330205025475"></p>
<p>可以修改这里的代码，将跳转语句修改为nop：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330205052442.png" alt="image-20220330205052442"></p>
<p>现在按F9，直接运行：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330205126602.png" alt="image-20220330205126602"></p>
<p>现在时间超出 20 也不会自行退出了。</p>
<h3 id="扩展延伸"><a href="#扩展延伸" class="headerlink" title="扩展延伸"></a>扩展延伸</h3><p>一般软件的时限保护如下:</p>
<p>在安装软件时，由安装程序取得当前系统日期，或者由主程序在软件第 1 次运行时获得系统日期，并将其记录在系统中某个地方(注册表、文件、扇区)。</p>
<p>这个时间统称是软件的安装日期。程序每次运行时都要取得当前系统日期，将其与之前记录的安装日期进行比较。</p>
<p>考虑周全的话，软件最少要保存两个时间值，一个时间值是上述说的安装时间，另一个是最近运行的时间。</p>
<p>用于获取时间的API函数有<code>GetSystemTime</code>、<code>GetLocalTime</code>和<code>GetFileTime</code>，调试时可以考虑在这些函数上下断点。</p>
<p>也可以利用<code>RegMon</code>、<code>FileMon</code>之类的软件进行监控，找到时间存放的位置。</p>
<h2 id="突破菜单功能限制"><a href="#突破菜单功能限制" class="headerlink" title="突破菜单功能限制"></a>突破菜单功能限制</h2><blockquote>
<p>实例来自看雪论坛的《加密与解密》。</p>
</blockquote>
<h3 id="前置介绍"><a href="#前置介绍" class="headerlink" title="前置介绍"></a>前置介绍</h3><p>这类程序一般是Demo版，其菜单或窗口中的部分选项是灰色的，无法使用。</p>
<p>这种功能受限的程序一般分两种：</p>
<ol>
<li>一种是试用版和正式版的软件是完全不同的两个版本，被禁止的功能在试用版中根本没有相应代码，这些代码只有正式版中才有，而正式版是无法免费下载的，只能向软件作者购买。</li>
<li>另一种是使用版和正式版为同一个文件。没有注册时按照试用版运行，禁止用户使用某些功能；注册之后就以正式版运行，用户可以使用其全部功能。可见，被禁止的那些功能的程序代码其实是存在于程序之中的，解密者只要通过一定方法就能恢复被限制的功能。</li>
</ol>
<p><strong>相关函数</strong>：</p>
<p>如果要将软件菜单和窗口变灰(不可用状态)，可以使用如下函数：</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">BOOL <span class="token function">EnableMenuItem</span><span class="token punctuation">(</span><span class="token punctuation">[</span>in<span class="token punctuation">]</span> HMENU hMenu<span class="token punctuation">,</span> <span class="token punctuation">[</span>in<span class="token punctuation">]</span> UINT uIDEnableItem<span class="token punctuation">,</span>
                    <span class="token punctuation">[</span>in<span class="token punctuation">]</span> UINT uEnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>

<p><code>hMenu</code>是菜单句柄，<code>uIDEnableItem</code>是允许或禁止的一个菜单条目的标识符，<code>uEnable</code>是控制标识。</p>
<pre class="line-numbers language-c" data-language="c"><code class="language-c">BOOL <span class="token function">EnableWindow</span><span class="token punctuation">(</span><span class="token punctuation">[</span>in<span class="token punctuation">]</span> HWND hWnd<span class="token punctuation">,</span> <span class="token punctuation">[</span>in<span class="token punctuation">]</span> BOOL bEnable<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>

<p><code>hWnd</code>是窗口句柄，<code>hEnable</code>是控制标志。</p>
<h3 id="调试软件"><a href="#调试软件" class="headerlink" title="调试软件"></a>调试软件</h3><p>该软件一部分文字和按钮都被禁用：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204030266.png" alt="image-20220330204030266"></p>
<p>放入OllyDBG进行调试：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330204000672.png" alt="image-20220330204000672"></p>
<p>进入API列表：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330203859800.png" alt="image-20220330203859800"></p>
<p>定位到该关键函数，双击进入对应代码处：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330203833874.png" alt="image-20220330203833874"></p>
<p>观察上方的<code>push</code>，可知传入该函数的参数。</p>
<p>将上方的<code>push 0x1</code>修改为<code>push 0x0</code>，实际上就是将标志设为 0 ，按<code>F9</code>直接运行，发现原本禁用的按钮已经可以使用，点击后弹出窗口：</p>
<p><img src="https://oss.chundot.xyz/picgo/image-20220330203752439.png" alt="image-20220330203752439"></p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>汇编</tag>
        <tag>逆向</tag>
        <tag>破解</tag>
      </tags>
  </entry>
</search>
